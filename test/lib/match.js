(function() {
  var $, $$, $_, Achieve, Assert, Believe, Context, Message, Method, Minimatch, Policy, Retract, Rule, Runner, Term, Trigger, Variable, _Bob, _Fish, _Joe, _Peas, _Tuna, __, _get, _likes, _make, assert_, attempt_, believe_, expect, match, minimatch, mm, module_, onAssert, onAttempt, onRetract, options, pattern, re, runtime, unit_;

  expect = require('chai').expect;

  minimatch = require("minimatch");

  ({Minimatch} = minimatch);

  ({unit_, runtime} = require('./common'));

  $$ = unit_(module);

  ({Variable, Term, Context, Assert, assert_, Retract, Believe, believe_, attempt_, Achieve} = runtime);

  ({$_, __, $, module_, Message, Policy, Rule, Trigger, onAssert, onRetract, onAttempt, Runner, Method} = runtime);

  ({match} = runtime);

  ({_Bob, _Joe, _likes, _Fish, _Tuna, _Peas, _get} = require('./common'));

  _make = $_('make');

  pattern = '*.js';

  options = {};

  mm = function(pattern, options) {
    return minimatch.makeRe(pattern, options);
  };

  re = mm('*.js');

  //$$.$ 'Minimatch to RegExp'
  //$$._ re
  describe('Matching', function() {
    describe('Values', function() {
      it('match __, null', function() {
        return expect(match(__, null)).to.be.true;
      });
      it('match null, null', function() {
        return expect(match(null, null)).to.be.true;
      });
      it("match null, 'hello'", function() {
        return expect(match(null, 'hello')).to.be.false;
      });
      it("match 'hello', 'hello'", function() {
        return expect(match('hello', 'hello')).to.be.true;
      });
      it("match 'hello', 'goodbye'", function() {
        return expect(match('hello', 'goodbye')).to.be.false;
      });
      it("match ((x) -> x == 10), 10", function() {
        return expect(match((function(x) {
          return x === 10;
        }), 10)).to.be.true;
      });
      it("match ((x) -> x == 10), 20", function() {
        return expect(match((function(x) {
          return x === 10;
        }), 20)).to.be.false;
      });
      return it("match ((x) -> x > 10), 20", function() {
        return expect(match((function(x) {
          return x > 10;
        }), 20)).to.be.true;
      });
    });
    describe('Regular Expressions', function() {
      it("match(re, 'test.js')", function() {
        return expect(match(re, 'test.js')).to.be.true;
      });
      return it("match(re, 'test.txt')", function() {
        return expect(match(re, 'test.txt')).to.be.false;
      });
    });
    describe('Variable Binding', function() {
      return it("match($('x'), 10)", function() {
        //$$._ match($('x'), 10)
        return expect(match($('x'), 10)).to.have.property('$x', 10);
      });
    });
    describe('Clauses', function() {
      it("believe_(_Bob, _likes, _Fish).match Believe, __, _likes, __", function() {
        return expect(believe_(_Bob, _likes, _Fish).match(Believe, __, _likes, __)).to.be.true;
      });
      return it("believe_(_Bob, _likes, _Fish).match Believe, $('x'), _likes, $('y')", function() {
        var result;
        result = believe_(_Bob, _likes, _Fish).match(Believe, $('x'), _likes, $('y'));
        expect(result).to.have.property('$x', _Bob);
        return expect(result).to.have.property('$y', _Fish);
      });
    });
    describe('Messages', function() {
      return it("assert_(Believe, _Bob, _likes, _Fish).match Assert, Believe, $('x'), _likes, $('y')", function() {
        var result;
        result = assert_(Believe, _Bob, _likes, _Fish).match(Assert, Believe, $('x'), _likes, $('y'));
        expect(result).to.have.property('$x', _Bob);
        return expect(result).to.have.property('$y', _Fish);
      });
    });
    describe('Triggers', function() {
      it("onAssert(Believe, $('x'), _likes, $('y')).match assert_(Believe, _Bob, _likes, _Fish)", function() {
        var result;
        result = onAssert(Believe, $('x'), _likes, $('y')).match(assert_(Believe, _Bob, _likes, _Fish));
        expect(result).to.have.property('$x', _Bob);
        return expect(result).to.have.property('$y', _Fish);
      });
      return it("onAssert(Believe, $('x'), _likes, $('y')).match attempt_(Believe, _Bob, _likes, _Fish)", function() {
        var result;
        result = onAssert(Believe, $('x'), _likes, $('y')).match(attempt_(Believe, _Bob, _likes, _Fish));
        return expect(result).to.be.false;
      });
    });
    return describe('Triggers with Xtras', function() {
      return it("onAssert(Believe, $('x'), _likes, $('y')).match assert_(Believe, _Bob, _likes, _Fish)", function() {
        var result;
        result = onAssert(Believe, $('x'), _likes, $('y')).match(assert_(Believe, _Bob, _likes, _Fish));
        expect(result).to.have.property('$x', _Bob);
        return expect(result).to.have.property('$y', _Fish);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
