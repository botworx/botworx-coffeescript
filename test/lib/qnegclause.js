(function() {
  var $$, $_, Believe, Variable, _$, _Chips, _Fish, __, _exists, _likes, assert, context_, runtime, unit_, yamlcontext_;

  assert = require('chai').assert;

  ({unit_, runtime, _exists, _likes, _Fish, _Chips} = require('./common'));

  $$ = unit_(module);

  ({__, $_, _$, context_, yamlcontext_, Variable, Believe} = runtime);

  describe('Query', function() {
    return describe('NegClause', function() {
      return it('should work', function() {
        var _$x, _$y, _$z, ctx;
        ctx = yamlcontext_().load($$.dataPath('bob.yml'));
        $$.h2("All Clauses");
        $$._(ctx.toString());
        $$.h2('Binders');
        _$x = new Variable('$x');
        _$y = new Variable('$y');
        _$z = new Variable('$z');
        $$.$("ctx.query Believe, _$x, _likes, _$y\n.not Believe, _$x, _likes, _Chips");
        return ctx.query(Believe, _$x, _likes, _Fish).not(Believe, _$x, _likes, _Chips).exec(function(binder) {
          return $$._(binder);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicW5lZ2NsYXVzZS5qcyIsInNvdXJjZXMiOlsicW5lZ2NsYXVzZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxFQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUE7O0VBQUEsTUFBQSxHQUFTLE9BQUEsQ0FBUSxNQUFSLENBQWUsQ0FBQzs7RUFDekIsQ0FBQSxDQUFDLEtBQUQsRUFBUSxPQUFSLEVBQWlCLE9BQWpCLEVBQTBCLE1BQTFCLEVBQWtDLEtBQWxDLEVBQXlDLE1BQXpDLENBQUEsR0FBbUQsT0FBQSxDQUFRLFVBQVIsQ0FBbkQ7O0VBQ0EsRUFBQSxHQUFLLEtBQUEsQ0FBTSxNQUFOOztFQUNMLENBQUEsQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLEVBQVQsRUFBYSxRQUFiLEVBQXVCLFlBQXZCLEVBQXFDLFFBQXJDLEVBQStDLE9BQS9DLENBQUEsR0FBMEQsT0FBMUQ7O0VBRUEsUUFBQSxDQUFTLE9BQVQsRUFBa0IsUUFBQSxDQUFBLENBQUE7V0FDaEIsUUFBQSxDQUFTLFdBQVQsRUFBc0IsUUFBQSxDQUFBLENBQUE7YUFDcEIsRUFBQSxDQUFHLGFBQUgsRUFBa0IsUUFBQSxDQUFBLENBQUE7QUFDaEIsWUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtRQUFBLEdBQUEsR0FBTSxZQUFBLENBQUEsQ0FBYyxDQUFDLElBQWYsQ0FBb0IsRUFBRSxDQUFDLFFBQUgsQ0FBWSxTQUFaLENBQXBCO1FBRU4sRUFBRSxDQUFDLEVBQUgsQ0FBTSxhQUFOO1FBQ0EsRUFBRSxDQUFDLENBQUgsQ0FBSyxHQUFHLENBQUMsUUFBSixDQUFBLENBQUw7UUFFQSxFQUFFLENBQUMsRUFBSCxDQUFNLFNBQU47UUFDQSxHQUFBLEdBQU0sSUFBSSxRQUFKLENBQWEsSUFBYjtRQUNOLEdBQUEsR0FBTSxJQUFJLFFBQUosQ0FBYSxJQUFiO1FBQ04sR0FBQSxHQUFNLElBQUksUUFBSixDQUFhLElBQWI7UUFFTixFQUFFLENBQUMsQ0FBSCxDQUFLLHdFQUFMO2VBSUEsR0FBRyxDQUFDLEtBQUosQ0FBVSxPQUFWLEVBQW1CLEdBQW5CLEVBQXdCLE1BQXhCLEVBQWdDLEtBQWhDLENBQ0EsQ0FBQyxHQURELENBQ0ssT0FETCxFQUNjLEdBRGQsRUFDbUIsTUFEbkIsRUFDMkIsTUFEM0IsQ0FFQSxDQUFDLElBRkQsQ0FFTSxRQUFBLENBQUMsTUFBRCxDQUFBO2lCQUNKLEVBQUUsQ0FBQyxDQUFILENBQUssTUFBTDtRQURJLENBRk47TUFmZ0IsQ0FBbEI7SUFEb0IsQ0FBdEI7RUFEZ0IsQ0FBbEI7QUFMQSIsInNvdXJjZXNDb250ZW50IjpbImFzc2VydCA9IHJlcXVpcmUoJ2NoYWknKS5hc3NlcnRcbnt1bml0XywgcnVudGltZSwgX2V4aXN0cywgX2xpa2VzLCBfRmlzaCwgX0NoaXBzfSA9IHJlcXVpcmUoJy4vY29tbW9uJylcbiQkID0gdW5pdF8gbW9kdWxlXG57X18sICRfLCBfJCwgY29udGV4dF8sIHlhbWxjb250ZXh0XywgVmFyaWFibGUsIEJlbGlldmV9ID0gcnVudGltZVxuXG5kZXNjcmliZSAnUXVlcnknLCAtPlxuICBkZXNjcmliZSAnTmVnQ2xhdXNlJywgLT5cbiAgICBpdCAnc2hvdWxkIHdvcmsnLCAtPlxuICAgICAgY3R4ID0geWFtbGNvbnRleHRfKCkubG9hZCAkJC5kYXRhUGF0aCgnYm9iLnltbCcpXG5cbiAgICAgICQkLmgyIFwiQWxsIENsYXVzZXNcIlxuICAgICAgJCQuXyBjdHgudG9TdHJpbmcoKVxuXG4gICAgICAkJC5oMiAnQmluZGVycydcbiAgICAgIF8keCA9IG5ldyBWYXJpYWJsZSAnJHgnXG4gICAgICBfJHkgPSBuZXcgVmFyaWFibGUgJyR5J1xuICAgICAgXyR6ID0gbmV3IFZhcmlhYmxlICckeidcblxuICAgICAgJCQuJCBcIlwiXCJcbiAgICAgIGN0eC5xdWVyeSBCZWxpZXZlLCBfJHgsIF9saWtlcywgXyR5XG4gICAgICAubm90IEJlbGlldmUsIF8keCwgX2xpa2VzLCBfQ2hpcHNcbiAgICAgIFwiXCJcIlxuICAgICAgY3R4LnF1ZXJ5IEJlbGlldmUsIF8keCwgX2xpa2VzLCBfRmlzaFxuICAgICAgLm5vdCBCZWxpZXZlLCBfJHgsIF9saWtlcywgX0NoaXBzXG4gICAgICAuZXhlYyAoYmluZGVyKSAtPlxuICAgICAgICAkJC5fIGJpbmRlclxuIl19
