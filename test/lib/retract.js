(function() {
  var $$, Achieve, Assert, Attempt, Believe, Context, Message, Method, OnAssert, OnAttempt, OnRetract, Policy, Retract, Rule, Runner, Term, Trigger, _, _$, _$self, _Bob, _Fish, _Joe, _Peas, __, _get, _likes, assert, module_, runtime, unit_;

  assert = require('chai').assert;

  ({unit_, runtime} = require('./common'));

  $$ = unit_(module);

  ({Term, Context, Assert, Retract, Believe, Attempt, Achieve} = runtime);

  ({_, __, _$, module_, _$self, Message, Policy, Rule, Trigger, OnAssert, OnRetract, OnAttempt, Runner, Method} = runtime);

  ({_Bob, _Joe, _likes, _Fish, _Peas, _get} = require('./common'));

  describe('Retract', function() {
    return it('should work', function() {
      var c, c1, c2, ctx, i, len, m, ref, rnr;
      rnr = new Runner();
      ctx = rnr.ctx;
      c1 = new Believe(_Bob, _likes, _Fish);
      ctx.add(c1);
      c2 = new Believe(_Joe, _likes, _Peas);
      ctx.add(c2);
      $$.$("Context Before");
      ref = ctx.clauses;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        $$._(c.toString());
      }
      m = new Retract(c1);
      $$.$('Begin Task Execution');
      rnr.def(new Trigger(Retract, Believe, __, _likes, _Fish), function() {
        var $x;
        $x = this.msg.data.subj;
        return $$._(`${$x} doesn't like Fish`);
      });
      rnr.post(m);
      return rnr.run().then(function() {
        var j, len1, ref1, results;
        $$.$("Context After");
        ref1 = ctx.clauses;
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          c = ref1[j];
          results.push($$._(c.toString()));
        }
        return results;
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0cmFjdC5qcyIsInNvdXJjZXMiOlsicmV0cmFjdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFBLENBQVEsTUFBUixDQUFlLENBQUM7O0VBQ3pCLENBQUEsQ0FBQyxLQUFELEVBQVEsT0FBUixDQUFBLEdBQW1CLE9BQUEsQ0FBUSxVQUFSLENBQW5COztFQUNBLEVBQUEsR0FBSyxLQUFBLENBQU0sTUFBTjs7RUFDTCxDQUFBLENBQUMsSUFBRCxFQUFPLE9BQVAsRUFBZ0IsTUFBaEIsRUFBd0IsT0FBeEIsRUFBaUMsT0FBakMsRUFBMEMsT0FBMUMsRUFBbUQsT0FBbkQsQ0FBQSxHQUE4RCxPQUE5RDs7RUFDQSxDQUFBLENBQUMsQ0FBRCxFQUFJLEVBQUosRUFBUSxFQUFSLEVBQVksT0FBWixFQUFxQixNQUFyQixFQUE2QixPQUE3QixFQUFzQyxNQUF0QyxFQUE4QyxJQUE5QyxFQUFvRCxPQUFwRCxFQUE2RCxRQUE3RCxFQUF1RSxTQUF2RSxFQUFrRixTQUFsRixFQUE2RixNQUE3RixFQUFxRyxNQUFyRyxDQUFBLEdBQStHLE9BQS9HOztFQUNBLENBQUEsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLE1BQWIsRUFBcUIsS0FBckIsRUFBNEIsS0FBNUIsRUFBbUMsSUFBbkMsQ0FBQSxHQUEyQyxPQUFBLENBQVEsVUFBUixDQUEzQzs7RUFFQSxRQUFBLENBQVMsU0FBVCxFQUFvQixRQUFBLENBQUEsQ0FBQTtXQUNsQixFQUFBLENBQUcsYUFBSCxFQUFrQixRQUFBLENBQUEsQ0FBQTtBQUNoQixVQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7TUFBQSxHQUFBLEdBQU0sSUFBSSxNQUFKLENBQUE7TUFDTixHQUFBLEdBQU0sR0FBRyxDQUFDO01BQ1YsRUFBQSxHQUFLLElBQUksT0FBSixDQUFZLElBQVosRUFBa0IsTUFBbEIsRUFBMEIsS0FBMUI7TUFDTCxHQUFHLENBQUMsR0FBSixDQUFRLEVBQVI7TUFDQSxFQUFBLEdBQUssSUFBSSxPQUFKLENBQVksSUFBWixFQUFrQixNQUFsQixFQUEwQixLQUExQjtNQUNMLEdBQUcsQ0FBQyxHQUFKLENBQVEsRUFBUjtNQUVBLEVBQUUsQ0FBQyxDQUFILENBQUssZ0JBQUw7QUFDQTtNQUFBLEtBQUEscUNBQUE7O1FBQ0UsRUFBRSxDQUFDLENBQUgsQ0FBSyxDQUFDLENBQUMsUUFBRixDQUFBLENBQUw7TUFERjtNQUdBLENBQUEsR0FBSSxJQUFJLE9BQUosQ0FBWSxFQUFaO01BRUosRUFBRSxDQUFDLENBQUgsQ0FBSyxzQkFBTDtNQUVBLEdBQUcsQ0FBQyxHQUFKLENBQVEsSUFBSSxPQUFKLENBQVksT0FBWixFQUFxQixPQUFyQixFQUE4QixFQUE5QixFQUFrQyxNQUFsQyxFQUEwQyxLQUExQyxDQUFSLEVBQTBELFFBQUEsQ0FBQSxDQUFBO0FBQ3hELFlBQUE7UUFBQSxFQUFBLEdBQUssSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUM7ZUFDZixFQUFFLENBQUMsQ0FBSCxDQUFLLENBQUEsQ0FBQSxDQUFHLEVBQUgsQ0FBTSxrQkFBTixDQUFMO01BRndELENBQTFEO01BSUEsR0FBRyxDQUFDLElBQUosQ0FBUyxDQUFUO2FBQ0EsR0FBRyxDQUFDLEdBQUosQ0FBQSxDQUFTLENBQUMsSUFBVixDQUFlLFFBQUEsQ0FBQSxDQUFBO0FBQ2IsWUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQTtRQUFBLEVBQUUsQ0FBQyxDQUFILENBQUssZUFBTDtBQUNBO0FBQUE7UUFBQSxLQUFBLHdDQUFBOzt1QkFDRSxFQUFFLENBQUMsQ0FBSCxDQUFLLENBQUMsQ0FBQyxRQUFGLENBQUEsQ0FBTDtRQURGLENBQUE7O01BRmEsQ0FBZjtJQXJCZ0IsQ0FBbEI7RUFEa0IsQ0FBcEI7QUFQQSIsInNvdXJjZXNDb250ZW50IjpbImFzc2VydCA9IHJlcXVpcmUoJ2NoYWknKS5hc3NlcnRcbnt1bml0XywgcnVudGltZX0gPSByZXF1aXJlKCcuL2NvbW1vbicpXG4kJCA9IHVuaXRfIG1vZHVsZVxue1Rlcm0sIENvbnRleHQsIEFzc2VydCwgUmV0cmFjdCwgQmVsaWV2ZSwgQXR0ZW1wdCwgQWNoaWV2ZX0gPSBydW50aW1lXG57XywgX18sIF8kLCBtb2R1bGVfLCBfJHNlbGYsIE1lc3NhZ2UsIFBvbGljeSwgUnVsZSwgVHJpZ2dlciwgT25Bc3NlcnQsIE9uUmV0cmFjdCwgT25BdHRlbXB0LCBSdW5uZXIsIE1ldGhvZH0gPSBydW50aW1lXG57X0JvYiwgX0pvZSwgX2xpa2VzLCBfRmlzaCwgX1BlYXMsIF9nZXR9ID0gcmVxdWlyZSgnLi9jb21tb24nKVxuXG5kZXNjcmliZSAnUmV0cmFjdCcsIC0+XG4gIGl0ICdzaG91bGQgd29yaycsIC0+XG4gICAgcm5yID0gbmV3IFJ1bm5lcigpXG4gICAgY3R4ID0gcm5yLmN0eFxuICAgIGMxID0gbmV3IEJlbGlldmUoX0JvYiwgX2xpa2VzLCBfRmlzaClcbiAgICBjdHguYWRkKGMxKVxuICAgIGMyID0gbmV3IEJlbGlldmUoX0pvZSwgX2xpa2VzLCBfUGVhcylcbiAgICBjdHguYWRkKGMyKVxuXG4gICAgJCQuJCBcIkNvbnRleHQgQmVmb3JlXCJcbiAgICBmb3IgYyBpbiBjdHguY2xhdXNlc1xuICAgICAgJCQuXyBjLnRvU3RyaW5nKClcblxuICAgIG0gPSBuZXcgUmV0cmFjdChjMSlcblxuICAgICQkLiQgJ0JlZ2luIFRhc2sgRXhlY3V0aW9uJ1xuXG4gICAgcm5yLmRlZiBuZXcgVHJpZ2dlcihSZXRyYWN0LCBCZWxpZXZlLCBfXywgX2xpa2VzLCBfRmlzaCksIC0+XG4gICAgICAkeCA9IEBtc2cuZGF0YS5zdWJqXG4gICAgICAkJC5fIFwiI3skeH0gZG9lc24ndCBsaWtlIEZpc2hcIlxuXG4gICAgcm5yLnBvc3QobSlcbiAgICBybnIucnVuKCkudGhlbiAtPlxuICAgICAgJCQuJCBcIkNvbnRleHQgQWZ0ZXJcIlxuICAgICAgZm9yIGMgaW4gY3R4LmNsYXVzZXNcbiAgICAgICAgJCQuXyBjLnRvU3RyaW5nKClcbiJdfQ==
