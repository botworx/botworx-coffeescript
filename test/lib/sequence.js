(function() {
  var $$, assert, runner_, runtime, sequence_, unit_;

  assert = require('chai').assert;

  ({unit_, runtime} = require('./common'));

  $$ = unit_(module);

  ({runner_, sequence_} = runtime);

  describe('Sequence', function() {
    return describe('In Parallel', function() {
      return it('should work', function() {
        var t1, t2;
        t1 = sequence_(function() {
          this.task(function() {
            return $$._('A');
          });
          this.task(function() {
            return $$._('B');
          });
          return this.task(function() {
            return $$._('C');
          });
        });
        t2 = sequence_(function() {
          this.task(function() {
            return $$._('D');
          });
          this.task(function() {
            $$._('E');
            return this.fail();
          });
          return this.task(function() {
            return $$._('F');
          });
        });
        return runner_().run(t1, t2);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VxdWVuY2UuanMiLCJzb3VyY2VzIjpbInNlcXVlbmNlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBQSxDQUFRLE1BQVIsQ0FBZSxDQUFDOztFQUN6QixDQUFBLENBQUMsS0FBRCxFQUFRLE9BQVIsQ0FBQSxHQUFtQixPQUFBLENBQVEsVUFBUixDQUFuQjs7RUFDQSxFQUFBLEdBQUssS0FBQSxDQUFNLE1BQU47O0VBQ0wsQ0FBQSxDQUFDLE9BQUQsRUFBVSxTQUFWLENBQUEsR0FBdUIsT0FBdkI7O0VBRUEsUUFBQSxDQUFTLFVBQVQsRUFBcUIsUUFBQSxDQUFBLENBQUE7V0FDbkIsUUFBQSxDQUFTLGFBQVQsRUFBd0IsUUFBQSxDQUFBLENBQUE7YUFDdEIsRUFBQSxDQUFHLGFBQUgsRUFBa0IsUUFBQSxDQUFBLENBQUE7QUFDaEIsWUFBQSxFQUFBLEVBQUE7UUFBQSxFQUFBLEdBQUssU0FBQSxDQUFVLFFBQUEsQ0FBQSxDQUFBO1VBQ2IsSUFBQyxDQUFBLElBQUQsQ0FBTSxRQUFBLENBQUEsQ0FBQTttQkFDSixFQUFFLENBQUMsQ0FBSCxDQUFLLEdBQUw7VUFESSxDQUFOO1VBRUEsSUFBQyxDQUFBLElBQUQsQ0FBTSxRQUFBLENBQUEsQ0FBQTttQkFDSixFQUFFLENBQUMsQ0FBSCxDQUFLLEdBQUw7VUFESSxDQUFOO2lCQUVBLElBQUMsQ0FBQSxJQUFELENBQU0sUUFBQSxDQUFBLENBQUE7bUJBQ0osRUFBRSxDQUFDLENBQUgsQ0FBSyxHQUFMO1VBREksQ0FBTjtRQUxhLENBQVY7UUFRTCxFQUFBLEdBQUssU0FBQSxDQUFVLFFBQUEsQ0FBQSxDQUFBO1VBQ2IsSUFBQyxDQUFBLElBQUQsQ0FBTSxRQUFBLENBQUEsQ0FBQTttQkFDSixFQUFFLENBQUMsQ0FBSCxDQUFLLEdBQUw7VUFESSxDQUFOO1VBRUEsSUFBQyxDQUFBLElBQUQsQ0FBTSxRQUFBLENBQUEsQ0FBQTtZQUNKLEVBQUUsQ0FBQyxDQUFILENBQUssR0FBTDttQkFDQSxJQUFDLENBQUEsSUFBRCxDQUFBO1VBRkksQ0FBTjtpQkFHQSxJQUFDLENBQUEsSUFBRCxDQUFNLFFBQUEsQ0FBQSxDQUFBO21CQUNKLEVBQUUsQ0FBQyxDQUFILENBQUssR0FBTDtVQURJLENBQU47UUFOYSxDQUFWO2VBU0wsT0FBQSxDQUFBLENBQVMsQ0FBQyxHQUFWLENBQWMsRUFBZCxFQUFrQixFQUFsQjtNQWxCZ0IsQ0FBbEI7SUFEc0IsQ0FBeEI7RUFEbUIsQ0FBckI7QUFMQSIsInNvdXJjZXNDb250ZW50IjpbImFzc2VydCA9IHJlcXVpcmUoJ2NoYWknKS5hc3NlcnRcbnt1bml0XywgcnVudGltZX0gPSByZXF1aXJlKCcuL2NvbW1vbicpXG4kJCA9IHVuaXRfIG1vZHVsZVxue3J1bm5lcl8sIHNlcXVlbmNlX30gPSBydW50aW1lXG5cbmRlc2NyaWJlICdTZXF1ZW5jZScsIC0+XG4gIGRlc2NyaWJlICdJbiBQYXJhbGxlbCcsIC0+XG4gICAgaXQgJ3Nob3VsZCB3b3JrJywgLT5cbiAgICAgIHQxID0gc2VxdWVuY2VfIC0+XG4gICAgICAgIEB0YXNrIC0+XG4gICAgICAgICAgJCQuXyAnQSdcbiAgICAgICAgQHRhc2sgLT5cbiAgICAgICAgICAkJC5fICdCJ1xuICAgICAgICBAdGFzayAtPlxuICAgICAgICAgICQkLl8gJ0MnXG5cbiAgICAgIHQyID0gc2VxdWVuY2VfIC0+XG4gICAgICAgIEB0YXNrIC0+XG4gICAgICAgICAgJCQuXyAnRCdcbiAgICAgICAgQHRhc2sgLT5cbiAgICAgICAgICAkJC5fICdFJ1xuICAgICAgICAgIEBmYWlsKClcbiAgICAgICAgQHRhc2sgLT5cbiAgICAgICAgICAkJC5fICdGJ1xuXG4gICAgICBydW5uZXJfKCkucnVuIHQxLCB0MlxuIl19
