(function() {
  var $$, $_, Believe, Variable, _$, __, _exists, _likes, assert, context_, runtime, unit_, yamlcontext_;

  assert = require('chai').assert;

  ({unit_, runtime, _exists, _likes} = require('./common'));

  $$ = unit_(module);

  ({__, $_, _$, context_, yamlcontext_, Variable, Believe} = runtime);

  describe('Query', function() {
    return describe('Filter', function() {
      return it('should work', function() {
        var _$x, _$y, _$z, ctx;
        ctx = yamlcontext_().load($$.dataPath('bob.yml'));
        $$.h2("All Clauses");
        $$._(ctx.toString());
        $$.h2('Binders');
        _$x = new Variable('$x');
        _$y = new Variable('$y');
        _$z = new Variable('$z');
        $$.$("ctx.query Believe, _$x, _likes, _$y\n.and Believe, _$z, _likes, _$y");
        ctx.query(Believe, _$x, _likes, _$y).and(Believe, _$z, _likes, _$y).exec(function(binder) {
          return $$._(binder);
        });
        $$.$("ctx.query Believe, _$x, _likes, _$y\n.and Believe, _$z, _likes, _$y\n.filter (binder) -> binder.$x != binder.$z");
        return ctx.query(Believe, _$x, _likes, _$y).and(Believe, _$z, _likes, _$y).filter(function(binder) {
          var $x, $z;
          ({$x, $z} = binder);
          return $x !== $z;
        }).exec(function(binder) {
          return $$._(binder);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWZpbHRlci5qcyIsInNvdXJjZXMiOlsicWZpbHRlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFBLENBQVEsTUFBUixDQUFlLENBQUM7O0VBQ3pCLENBQUEsQ0FBQyxLQUFELEVBQVEsT0FBUixFQUFpQixPQUFqQixFQUEwQixNQUExQixDQUFBLEdBQW9DLE9BQUEsQ0FBUSxVQUFSLENBQXBDOztFQUNBLEVBQUEsR0FBSyxLQUFBLENBQU0sTUFBTjs7RUFDTCxDQUFBLENBQUMsRUFBRCxFQUFLLEVBQUwsRUFBUyxFQUFULEVBQWEsUUFBYixFQUF1QixZQUF2QixFQUFxQyxRQUFyQyxFQUErQyxPQUEvQyxDQUFBLEdBQTBELE9BQTFEOztFQUVBLFFBQUEsQ0FBUyxPQUFULEVBQWtCLFFBQUEsQ0FBQSxDQUFBO1dBQ2hCLFFBQUEsQ0FBUyxRQUFULEVBQW1CLFFBQUEsQ0FBQSxDQUFBO2FBQ2pCLEVBQUEsQ0FBRyxhQUFILEVBQWtCLFFBQUEsQ0FBQSxDQUFBO0FBQ2hCLFlBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUE7UUFBQSxHQUFBLEdBQU0sWUFBQSxDQUFBLENBQWMsQ0FBQyxJQUFmLENBQW9CLEVBQUUsQ0FBQyxRQUFILENBQVksU0FBWixDQUFwQjtRQUVOLEVBQUUsQ0FBQyxFQUFILENBQU0sYUFBTjtRQUNBLEVBQUUsQ0FBQyxDQUFILENBQUssR0FBRyxDQUFDLFFBQUosQ0FBQSxDQUFMO1FBRUEsRUFBRSxDQUFDLEVBQUgsQ0FBTSxTQUFOO1FBQ0EsR0FBQSxHQUFNLElBQUksUUFBSixDQUFhLElBQWI7UUFDTixHQUFBLEdBQU0sSUFBSSxRQUFKLENBQWEsSUFBYjtRQUNOLEdBQUEsR0FBTSxJQUFJLFFBQUosQ0FBYSxJQUFiO1FBRU4sRUFBRSxDQUFDLENBQUgsQ0FBSyxxRUFBTDtRQUlBLEdBQUcsQ0FBQyxLQUFKLENBQVUsT0FBVixFQUFtQixHQUFuQixFQUF3QixNQUF4QixFQUFnQyxHQUFoQyxDQUNBLENBQUMsR0FERCxDQUNLLE9BREwsRUFDYyxHQURkLEVBQ21CLE1BRG5CLEVBQzJCLEdBRDNCLENBRUEsQ0FBQyxJQUZELENBRU0sUUFBQSxDQUFDLE1BQUQsQ0FBQTtpQkFDSixFQUFFLENBQUMsQ0FBSCxDQUFLLE1BQUw7UUFESSxDQUZOO1FBS0EsRUFBRSxDQUFDLENBQUgsQ0FBSyxpSEFBTDtlQUtBLEdBQUcsQ0FBQyxLQUFKLENBQVUsT0FBVixFQUFtQixHQUFuQixFQUF3QixNQUF4QixFQUFnQyxHQUFoQyxDQUNBLENBQUMsR0FERCxDQUNLLE9BREwsRUFDYyxHQURkLEVBQ21CLE1BRG5CLEVBQzJCLEdBRDNCLENBRUEsQ0FBQyxNQUZELENBRVEsUUFBQSxDQUFDLE1BQUQsQ0FBQTtBQUFZLGNBQUEsRUFBQSxFQUFBO1VBQUEsQ0FBQSxDQUFDLEVBQUQsRUFBSyxFQUFMLENBQUEsR0FBVyxNQUFYO2lCQUFtQixFQUFBLEtBQU07UUFBckMsQ0FGUixDQUdBLENBQUMsSUFIRCxDQUdNLFFBQUEsQ0FBQyxNQUFELENBQUE7aUJBQ0osRUFBRSxDQUFDLENBQUgsQ0FBSyxNQUFMO1FBREksQ0FITjtNQXpCZ0IsQ0FBbEI7SUFEaUIsQ0FBbkI7RUFEZ0IsQ0FBbEI7QUFMQSIsInNvdXJjZXNDb250ZW50IjpbImFzc2VydCA9IHJlcXVpcmUoJ2NoYWknKS5hc3NlcnRcbnt1bml0XywgcnVudGltZSwgX2V4aXN0cywgX2xpa2VzfSA9IHJlcXVpcmUoJy4vY29tbW9uJylcbiQkID0gdW5pdF8gbW9kdWxlXG57X18sICRfLCBfJCwgY29udGV4dF8sIHlhbWxjb250ZXh0XywgVmFyaWFibGUsIEJlbGlldmV9ID0gcnVudGltZVxuXG5kZXNjcmliZSAnUXVlcnknLCAtPlxuICBkZXNjcmliZSAnRmlsdGVyJywgLT5cbiAgICBpdCAnc2hvdWxkIHdvcmsnLCAtPlxuICAgICAgY3R4ID0geWFtbGNvbnRleHRfKCkubG9hZCAkJC5kYXRhUGF0aCgnYm9iLnltbCcpXG5cbiAgICAgICQkLmgyIFwiQWxsIENsYXVzZXNcIlxuICAgICAgJCQuXyBjdHgudG9TdHJpbmcoKVxuXG4gICAgICAkJC5oMiAnQmluZGVycydcbiAgICAgIF8keCA9IG5ldyBWYXJpYWJsZSAnJHgnXG4gICAgICBfJHkgPSBuZXcgVmFyaWFibGUgJyR5J1xuICAgICAgXyR6ID0gbmV3IFZhcmlhYmxlICckeidcblxuICAgICAgJCQuJCBcIlwiXCJcbiAgICAgIGN0eC5xdWVyeSBCZWxpZXZlLCBfJHgsIF9saWtlcywgXyR5XG4gICAgICAuYW5kIEJlbGlldmUsIF8keiwgX2xpa2VzLCBfJHlcbiAgICAgIFwiXCJcIlxuICAgICAgY3R4LnF1ZXJ5IEJlbGlldmUsIF8keCwgX2xpa2VzLCBfJHlcbiAgICAgIC5hbmQgQmVsaWV2ZSwgXyR6LCBfbGlrZXMsIF8keVxuICAgICAgLmV4ZWMgKGJpbmRlcikgLT5cbiAgICAgICAgJCQuXyBiaW5kZXJcblxuICAgICAgJCQuJCBcIlwiXCJcbiAgICAgIGN0eC5xdWVyeSBCZWxpZXZlLCBfJHgsIF9saWtlcywgXyR5XG4gICAgICAuYW5kIEJlbGlldmUsIF8keiwgX2xpa2VzLCBfJHlcbiAgICAgIC5maWx0ZXIgKGJpbmRlcikgLT4gYmluZGVyLiR4ICE9IGJpbmRlci4kelxuICAgICAgXCJcIlwiXG4gICAgICBjdHgucXVlcnkgQmVsaWV2ZSwgXyR4LCBfbGlrZXMsIF8keVxuICAgICAgLmFuZCBCZWxpZXZlLCBfJHosIF9saWtlcywgXyR5XG4gICAgICAuZmlsdGVyIChiaW5kZXIpIC0+IHskeCwgJHp9ID0gYmluZGVyOyAkeCAhPSAkelxuICAgICAgLmV4ZWMgKGJpbmRlcikgLT5cbiAgICAgICAgJCQuXyBiaW5kZXJcbiJdfQ==
