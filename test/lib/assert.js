(function() {
  var $$, Achieve, Assert, Attempt, Believe, Context, Message, Method, OnAssert, OnAttempt, OnRetract, Policy, Retract, Rule, Runner, Term, Trigger, _, _$, _$self, _Bob, _Fish, _Joe, _Peas, __, _get, _likes, assert, module_, runtime, unit_;

  assert = require('chai').assert;

  ({unit_, runtime} = require('./common'));

  $$ = unit_(module);

  ({Term, Context, Assert, Retract, Believe, Attempt, Achieve} = runtime);

  ({_, __, _$, module_, _$self, Message, Policy, Rule, Trigger, OnAssert, OnRetract, OnAttempt, Runner, Method} = runtime);

  ({_Bob, _Joe, _likes, _Fish, _Peas, _get} = require('./common'));

  describe('Rule', function() {
    return describe('@fire', function() {
      return it('should work', function() {
        var c, c1, c2, ctx, i, len, m, ref, rnr;
        ctx = new Context();
        c1 = new Believe(_Bob, _likes, _Fish);
        ctx.add(c1);
        c2 = new Believe(_Joe, _likes, _Peas);
        ctx.add(c2);
        $$.$("All Clauses");
        ref = ctx.clauses;
        for (i = 0, len = ref.length; i < len; i++) {
          c = ref[i];
          $$._(c.toString());
        }
        m = new Assert(c1);
        $$.$('Begin Task Execution');
        rnr = new Runner();
        rnr.def(new Trigger(Assert, Believe, __, _likes, _Fish), function() {
          var $x;
          $x = this.msg.data.subj;
          return $$._(`${$x} likes Fish`);
        });
        rnr.post(m);
        return rnr.run();
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlcyI6WyJhc3NlcnQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBQSxDQUFRLE1BQVIsQ0FBZSxDQUFDOztFQUN6QixDQUFBLENBQUMsS0FBRCxFQUFRLE9BQVIsQ0FBQSxHQUFtQixPQUFBLENBQVEsVUFBUixDQUFuQjs7RUFDQSxFQUFBLEdBQUssS0FBQSxDQUFNLE1BQU47O0VBQ0wsQ0FBQSxDQUFDLElBQUQsRUFBTyxPQUFQLEVBQWdCLE1BQWhCLEVBQXdCLE9BQXhCLEVBQWlDLE9BQWpDLEVBQTBDLE9BQTFDLEVBQW1ELE9BQW5ELENBQUEsR0FBOEQsT0FBOUQ7O0VBQ0EsQ0FBQSxDQUFDLENBQUQsRUFBSSxFQUFKLEVBQVEsRUFBUixFQUFZLE9BQVosRUFBcUIsTUFBckIsRUFBNkIsT0FBN0IsRUFBc0MsTUFBdEMsRUFBOEMsSUFBOUMsRUFBb0QsT0FBcEQsRUFBNkQsUUFBN0QsRUFBdUUsU0FBdkUsRUFBa0YsU0FBbEYsRUFBNkYsTUFBN0YsRUFBcUcsTUFBckcsQ0FBQSxHQUErRyxPQUEvRzs7RUFDQSxDQUFBLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxNQUFiLEVBQXFCLEtBQXJCLEVBQTRCLEtBQTVCLEVBQW1DLElBQW5DLENBQUEsR0FBMkMsT0FBQSxDQUFRLFVBQVIsQ0FBM0M7O0VBRUEsUUFBQSxDQUFTLE1BQVQsRUFBaUIsUUFBQSxDQUFBLENBQUE7V0FDZixRQUFBLENBQVMsT0FBVCxFQUFrQixRQUFBLENBQUEsQ0FBQTthQUNoQixFQUFBLENBQUcsYUFBSCxFQUFrQixRQUFBLENBQUEsQ0FBQTtBQUNoQixZQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7UUFBQSxHQUFBLEdBQU0sSUFBSSxPQUFKLENBQUE7UUFDTixFQUFBLEdBQUssSUFBSSxPQUFKLENBQVksSUFBWixFQUFrQixNQUFsQixFQUEwQixLQUExQjtRQUNMLEdBQUcsQ0FBQyxHQUFKLENBQVEsRUFBUjtRQUNBLEVBQUEsR0FBSyxJQUFJLE9BQUosQ0FBWSxJQUFaLEVBQWtCLE1BQWxCLEVBQTBCLEtBQTFCO1FBQ0wsR0FBRyxDQUFDLEdBQUosQ0FBUSxFQUFSO1FBRUEsRUFBRSxDQUFDLENBQUgsQ0FBSyxhQUFMO0FBQ0E7UUFBQSxLQUFBLHFDQUFBOztVQUNFLEVBQUUsQ0FBQyxDQUFILENBQUssQ0FBQyxDQUFDLFFBQUYsQ0FBQSxDQUFMO1FBREY7UUFHQSxDQUFBLEdBQUksSUFBSSxNQUFKLENBQVcsRUFBWDtRQUVKLEVBQUUsQ0FBQyxDQUFILENBQUssc0JBQUw7UUFDQSxHQUFBLEdBQU0sSUFBSSxNQUFKLENBQUE7UUFFTixHQUFHLENBQUMsR0FBSixDQUFRLElBQUksT0FBSixDQUFZLE1BQVosRUFBb0IsT0FBcEIsRUFBNkIsRUFBN0IsRUFBaUMsTUFBakMsRUFBeUMsS0FBekMsQ0FBUixFQUF5RCxRQUFBLENBQUEsQ0FBQTtBQUN2RCxjQUFBO1VBQUEsRUFBQSxHQUFLLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBSSxDQUFDO2lCQUNmLEVBQUUsQ0FBQyxDQUFILENBQUssQ0FBQSxDQUFBLENBQUcsRUFBSCxDQUFNLFdBQU4sQ0FBTDtRQUZ1RCxDQUF6RDtRQUlBLEdBQUcsQ0FBQyxJQUFKLENBQVMsQ0FBVDtlQUNBLEdBQUcsQ0FBQyxHQUFKLENBQUE7TUFyQmdCLENBQWxCO0lBRGdCLENBQWxCO0VBRGUsQ0FBakI7QUFQQSIsInNvdXJjZXNDb250ZW50IjpbImFzc2VydCA9IHJlcXVpcmUoJ2NoYWknKS5hc3NlcnRcbnt1bml0XywgcnVudGltZX0gPSByZXF1aXJlKCcuL2NvbW1vbicpXG4kJCA9IHVuaXRfIG1vZHVsZVxue1Rlcm0sIENvbnRleHQsIEFzc2VydCwgUmV0cmFjdCwgQmVsaWV2ZSwgQXR0ZW1wdCwgQWNoaWV2ZX0gPSBydW50aW1lXG57XywgX18sIF8kLCBtb2R1bGVfLCBfJHNlbGYsIE1lc3NhZ2UsIFBvbGljeSwgUnVsZSwgVHJpZ2dlciwgT25Bc3NlcnQsIE9uUmV0cmFjdCwgT25BdHRlbXB0LCBSdW5uZXIsIE1ldGhvZH0gPSBydW50aW1lXG57X0JvYiwgX0pvZSwgX2xpa2VzLCBfRmlzaCwgX1BlYXMsIF9nZXR9ID0gcmVxdWlyZSgnLi9jb21tb24nKVxuXG5kZXNjcmliZSAnUnVsZScsIC0+XG4gIGRlc2NyaWJlICdAZmlyZScsIC0+XG4gICAgaXQgJ3Nob3VsZCB3b3JrJywgLT5cbiAgICAgIGN0eCA9IG5ldyBDb250ZXh0KClcbiAgICAgIGMxID0gbmV3IEJlbGlldmUoX0JvYiwgX2xpa2VzLCBfRmlzaClcbiAgICAgIGN0eC5hZGQoYzEpXG4gICAgICBjMiA9IG5ldyBCZWxpZXZlKF9Kb2UsIF9saWtlcywgX1BlYXMpXG4gICAgICBjdHguYWRkKGMyKVxuXG4gICAgICAkJC4kIFwiQWxsIENsYXVzZXNcIlxuICAgICAgZm9yIGMgaW4gY3R4LmNsYXVzZXNcbiAgICAgICAgJCQuXyBjLnRvU3RyaW5nKClcblxuICAgICAgbSA9IG5ldyBBc3NlcnQoYzEpXG5cbiAgICAgICQkLiQgJ0JlZ2luIFRhc2sgRXhlY3V0aW9uJ1xuICAgICAgcm5yID0gbmV3IFJ1bm5lcigpXG5cbiAgICAgIHJuci5kZWYgbmV3IFRyaWdnZXIoQXNzZXJ0LCBCZWxpZXZlLCBfXywgX2xpa2VzLCBfRmlzaCksIC0+XG4gICAgICAgICR4ID0gQG1zZy5kYXRhLnN1YmpcbiAgICAgICAgJCQuXyBcIiN7JHh9IGxpa2VzIEZpc2hcIlxuXG4gICAgICBybnIucG9zdChtKVxuICAgICAgcm5yLnJ1bigpXG4iXX0=
