(function() {
  var $, $$, $_, Achieve, Assert, Attempt, Believe, Clause, Goal, Message, OnAssert, OnAttempt, OnRetract, Propose, Retract, Subject, Term, Trigger, Variable, Verb, _$, _I, __, _impasse, _start, clone, match, terms, unit_, variable_;

  ({unit_, __, clone} = require('./common'));

  $$ = unit_(module);

  
  //The Main Classes

  Variable = class Variable {
    constructor(name, pattern) {
      this.name = name;
      this.pattern = pattern;
    }

  };

  exports.Variable = Variable;

  exports.$ = $ = exports.variable_ = variable_ = function(n, p) {
    return new Variable(`$${n}`, p);
  };

  exports.match = match = function(p, v, b = true) {
    if (!b) {
      return false;
    }
    if (p === __ || p === v) {
      return b;
    }
    if (typeof p === 'function' && p(v)) {
      return b;
    }
    if (p instanceof RegExp && p.test(v)) {
      return b;
    }
    if (p instanceof Variable) {
      if (p.pattern && !match(p.pattern, v)) {
        return false;
      }
      if ('object' === typeof b) {
        b[p.name] = v;
        return b;
      }
      return {
        [`${p.name}`]: v
      };
    }
    return false;
  };

  Term = class Term {
    constructor(name) {
      this.name = name;
    }

    toString() {
      return this.name;
    }

    toJSON() {
      return {
        type: this.constructor.name,
        name: this.name
      };
    }

  };

  exports.Term = Term;

  Subject = class Subject extends Term {
    constructor(n) {
      super(n);
    }

  };

  Verb = class Verb extends Term {
    constructor(n) {
      super(n);
    }

  };

  /*
  Object to Term
  */
  exports.terms = terms = {};

  exports.$_ = $_ = function(arg, type) {
    var char, e, i, len, n, obj, term;
    switch (typeof arg) {
      case 'string':
        term = terms[arg];
        if (!term) {
          if (!type) {
            char = arg[0];
            if (char === char.toUpperCase()) {
              type = Subject;
            } else {
              type = Verb;
            }
          } else if (typeof type === 'string') {
            type = eval(`${type} = class ${type} extends Term {};`);
          }
          terms[arg] = term = new type(arg);
        }
        return term;
      case 'object':
        obj = {};
        for (i = 0, len = arg.length; i < len; i++) {
          e = arg[i];
          n = '_' + e;
          obj[n] = $_(e);
        }
        return obj;
    }
  };

  exports._I = _I = $_('I');

  exports._start = _start = $_('start');

  exports._impasse = _impasse = $_('impasse');

  /*
  Object to String
  */
  exports._$ = _$ = function(obj) {
    if (obj === __) {
      return '__';
    }
    switch (typeof obj) {
      case 'symbol':
        return Symbol.keyFor(obj);
      case 'string':
        return obj;
      default:
        if (obj instanceof Clause) {
          return `(${obj})`;
        } else {
          return String(obj);
        }
    }
  };

  Clause = class Clause {
    constructor(subj, verb, obj1, xtra) {
      var k, v;
      this.subj = subj;
      this.verb = verb;
      this.obj = obj1;
      for (k in xtra) {
        v = xtra[k];
        this[k] = v;
      }
    }

    toString() {
      var k, ref, v, xtra;
      xtra = [];
      ref = this;
      for (k in ref) {
        v = ref[k];
        if (k !== 'subj' && k !== 'verb' && k !== 'obj') {
          xtra.push(`${k}: ${v}`);
        }
      }
      return [this.constructor.name, _$(this.subj), _$(this.verb), _$(this.obj), xtra].join(' ');
    }

    toJSON() {
      return {
        type: this.constructor.name,
        subj: this.subj && JSON.stringify(this.subj),
        verb: this.verb && JSON.stringify(this.verb),
        obj: this.obj && JSON.stringify(this.obj)
      };
    }

    match(t, s, v, o, x) {
      return this instanceof t && match(s, this.subj, match(v, this.verb, match(o, this.obj)));
    }

  };

  exports.Clause = Clause;

  exports.clause_ = function(t, s, v, o, x) {
    return new t(s, v, o, x);
  };

  
  Believe = class Believe extends Clause {
    constructor(s, v, o, x) {
      super(s, v, o, x);
    }

  };

  exports.Believe = Believe;

  exports.believe_ = function(s, v, o, x) {
    return new Believe(s, v, o, x);
  };

  
  Goal = class Goal extends Clause {
    constructor(s, v, o, x) {
      super(s, v, o, x);
    }

  };

  exports.Goal = Goal;

  
  Achieve = class Achieve extends Goal {
    constructor(s, v, o, x) {
      super(s, v, o, x);
    }

  };

  exports.Achieve = Achieve;

  Message = class Message {
    constructor(data1, from1, to) {
      this.data = data1;
      this.from = from1;
      this.to = to;
    }

    toString() {
      return [this.constructor.name, this.data].join(' ');
    }

    toJSON() {
      return {
        type: this.constructor.name,
        data: this.data.toJSON(),
        to: this.to && this.to.toJSON(),
        from: this.from && this.from.toJSON()
      };
    }

    match(f, t, s, v, o, x) {
      return this instanceof f && this.data.match(t, s, v, o, x);
    }

  };

  exports.Message = Message;

  Propose = class Propose extends Message {
    constructor(data, from) {
      super(data, from);
    }

  };

  exports.Propose = Propose;

  exports.propose_ = function(t, s, v, o, x) {
    return new Propose(new t(s, v, o, x));
  };

  Attempt = class Attempt extends Message {
    constructor(data, from) {
      super(data, from);
    }

  };

  exports.Attempt = Attempt;

  exports.attempt_ = function(t, s, v, o, x) {
    return new Attempt(new t(s, v, o, x));
  };

  Assert = class Assert extends Message {
    constructor(data, from) {
      super(data, from);
    }

  };

  exports.Assert = Assert;

  exports.assert_ = function(t, s, v, o, x) {
    return new Assert(new t(s, v, o, x));
  };

  Retract = class Retract extends Message {
    constructor(data, from) {
      super(data, from);
    }

  };

  exports.Retract = Retract;

  exports.retract_ = function(t, s, v, o, x) {
    return new Retract(new t(s, v, o, x));
  };

  
  Trigger = class Trigger {
    constructor(flavor, type1, subj, verb, obj1, xtra1) {
      this.flavor = flavor;
      this.type = type1;
      this.subj = subj;
      this.verb = verb;
      this.obj = obj1;
      this.xtra = xtra1;
    }

    match(m) {
      return m.match(this.flavor, this.type, this.subj, this.verb, this.obj, this.xtra);
    }

  };

  exports.Trigger = Trigger;

  
  OnAssert = class OnAssert extends Trigger {
    constructor(t, s, v, o, x) {
      super(Assert, t, s, v, o, x);
    }

  };

  exports.OnAssert = OnAssert;

  exports.onAssert = function(t, s, v, o, x) {
    return new OnAssert(t, s, v, o, x);
  };

  
  OnRetract = class OnRetract extends Trigger {
    constructor(t, s, v, o, x) {
      super(Retract, t, s, v, o, x);
    }

  };

  exports.OnRetract = OnRetract;

  exports.onRetract = function(t, s, v, o, x) {
    return new OnRetract(t, s, v, o, x);
  };

  OnAttempt = class OnAttempt extends Trigger {
    constructor(t, s, v, o, x) {
      super(Attempt, t, s, v, o, x || Achieve);
    }

  };

  exports.OnAttempt = OnAttempt;

  exports.onAttempt = function(t, s, v, o, x) {
    return new OnAttempt(t, s, v, o, x);
  };

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
