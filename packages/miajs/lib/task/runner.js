(function() {
  var $$, Achieve, Agent, Assert, Attempt, Context, Message, Module, Propose, Retract, Runner, TS_INIT, TS_RUNNING, Task, _impasse, _start, clone, unit_;

  ({$$, unit_, clone} = require('./common'));

  $$ = unit_(module, $$);

  ({Task, Module, TS_INIT, TS_RUNNING} = require("./task"));

  ({_start, _impasse, Message, Propose, Attempt, Assert, Retract, Achieve} = require("../main"));

  ({Context} = require('../context'));

  Runner = class Runner extends Task {
    constructor(init) {
      super(init);
      this.ctx = new Context();
      this.posts = [];
      this.queue = [];
      this.scheduled = false;
      this.impassed = false;
      this.post(new Attempt(new Achieve(null, _start, null)));
    }

    schedule(t) {
      /*
      if t == this
        if @scheduled then return t
        @scheduled = true
        setImmediate =>
          @scheduled = false
          try
            if @idle() then @impasse() else @action()
          catch err
            @reject err
        return t
      */
      if (t === this) {
        return super.schedule(t);
      }
      if (t instanceof Runner) {
        t.run();
        this.schedule(this);
        return t;
      }
      //Else ...
      t.rnr = this;
      this.queue.push(t);
      this.schedule(this);
      return t;
    }

    broadcast(msg) {
      var i, len, m, ref, results, t;
      m = clone(msg);
      $$.$(`Broadcast:\t${m}`);
      m.from = this;
      this.post(m);
      ref = this.tasks;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        t = ref[i];
        results.push(t.broadcast(m));
      }
      return results;
    }

    post(msg) {
      if (!msg.from) {
        msg.from = this;
      }
      $$.$(`Post:\t${msg}`);
      return this.posts.push(msg);
    }

    fork(t) {
      var child;
      $$.$(`Fork:\t${t.msg}`);
      child = new Runner();
      child.policy = this.policy;
      child.ctx = this.ctx;
      return child.run(t);
    }

    eval(msg) {
      var m, pmsg, ref, results;
      switch (msg.constructor) {
        case Propose:
          $$.$(`* \t${msg}`);
          pmsg = new Attempt();
          Object.assign(pmsg, msg);
          ref = msg.from.matchRules(pmsg);
          results = [];
          for (m of ref) {
            results.push(this.fork(m.to));
          }
          return results;
          break;
        case Assert:
          $$.$(`+ \t${msg}`);
          this.ctx.add(msg.data);
          return this.dispatch(msg);
        case Retract:
          $$.$(`- \t${msg}`);
          this.ctx.remove(msg.data);
          return this.dispatch(msg);
        default:
          $$.$(`Eval:\t${msg}`);
          return this.dispatch(msg);
      }
    }

    dispatch(msg) {
      var m, ref, results;
      ref = msg.from.matchRules(msg);
      results = [];
      for (m of ref) {
        $$.$(`Fire:\t${m}`);
        results.push(this.schedule(m.to));
      }
      return results;
    }

    main() {
      var pStatus, post, status, t;
      $$.$('@main');
      while (t = this.queue.shift()) {
        $$.$('eval tasks');
        $$.$(`Tick:\t(${t.constructor.name}) ${t.msg}`);
        status = t.action();
        if (status === TS_RUNNING) {
          this.queue.push(t);
        } else if (t.parent) {
          pStatus = t.parent.strategy(t);
          if (pStatus === TS_RUNNING) {
            this.queue.push(t.parent);
          }
        } else if (t.caller) {
          t.caller.resume();
          this.queue.push(t.caller);
        }
      }
      while (post = this.posts.shift()) {
        $$.$('eval posts');
        this.eval(post);
      }
      if (this.idle() && this.impasse() && !this.scheduled) {
        this.resolve();
      }
      return this.status;
    }

    idle() {
      return this.posts.length === 0 && this.queue.length === 0 && this.tasks.length === 0;
    }

    impasse() {
      $$.$("@impasse");
      if (this.impassed) {
        return true;
      }
      this.impassed = true;
      this.post(new Attempt(new Achieve(null, _impasse, null)));
      this.schedule(this);
      return false;
    }

    run(...queue) {
      var i, len, task;
      for (i = 0, len = queue.length; i < len; i++) {
        task = queue[i];
        this.schedule(task);
      }
      return this;
    }

  };

  exports.Runner = Runner;

  exports.runner_ = function(before) {
    return new Runner(before);
  };

  
  //Agent

  Agent = class Agent extends Runner {
    constructor() {
      super();
    }

  };

  exports.Agent = Agent;

  exports.agent_ = function(init) {
    return new Agent(init);
  };

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
