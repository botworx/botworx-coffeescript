(function() {
  var $$, $_, Achieve, Assert, AsyncFunction, Attempt, Chain, Counter, EventEmitter, GeneratorFunction, Impostor, Loop, Message, Method, Module, Parallel, Policy, Propose, Retract, Rule, Sequence, TS, TS_FAILURE, TS_INIT, TS_RUNNING, TS_SUCCESS, TS_SUSPENDED, Task, TaskStatus, Term, __, clone, nextTick, toStatus, unit_;

  nextTick = require('process').nextTick;

  ({unit_, __, clone, GeneratorFunction, AsyncFunction} = require('./common'));

  $$ = unit_(module);

  ({EventEmitter} = require('events'));

  ({Policy} = require('./policy'));

  ({$_, Term, Message, Propose, Attempt, Assert, Retract, Achieve} = require('../main'));

  TaskStatus = class TaskStatus {
    constructor(name1) {
      this.name = name1;
    }

    toString() {
      return this.name;
    }

  };

  //toJSON: -> { type: @constructor.name, name: @name }
  TS = function(name) {
    return new TaskStatus(name);
  };

  TS_INIT = TS('Init');

  exports.TS_RUNNING = TS_RUNNING = TS('Running');

  exports.end = exports.TS_SUCCESS = TS_SUCCESS = TS('Success');

  TS_FAILURE = TS('Failure');

  TS_SUSPENDED = TS('Suspended');

  toStatus = function(status) {
    if (!(status instanceof TaskStatus)) {
      status = TS_SUCCESS;
    }
    return status;
  };

  Task = (function() {
    class Task extends EventEmitter {
      constructor(init) {
        super();
        this.init = init || this.init;
        this.rnr = null;
        this._msg = null;
        this._parent = null;
        this.tasks = [];
        this.result = null;
        this.status = TS_INIT;
        this.policy = null;
      }

      toJSON() {
        return {
          type: this.constructor.name,
          msg: this.msg
        };
      }

      def(trigger, action) {
        return this.addRule(new Rule(trigger, action));
      }

      defg(trigger, action) {
        return this.defn(this.rnr, trigger, action);
      }

      defn(n, trigger, action) {
        return n.addRule(new Rule(trigger, action));
      }

      addRule(r) {
        if (this.policy === null) {
          this.policy = new Policy(this);
        }
        return this.policy.add(r);
      }

      findRule(m) {
        return this.findRules(m).pop();
      }

      findRules(m) {
        if (this.policy) {
          return this.policy.find(m);
        }
        return [];
      }

      matchRule(m) {
        return this.matchRules(m).pop();
      }

      matchRules(m) {
        if (this.policy) {
          return this.policy.match(m);
        }
        return [];
      }

      strategy(child) {
        switch (child.status) {
          case TS_FAILURE:
            this.remove(child);
            return this.fail();
          case TS_SUCCESS:
            this.remove(child);
            if (tasks.length === 0) {
              return this.succeed();
            }
        }
      }

      add(child) {
        child.parent = this;
        this.tasks.push(child);
        return this;
      }

      remove(child) {
        var index;
        index = this.tasks.indexOf(child);
        if (index > -1) {
          this.tasks.splice(index, 1);
        }
        return this;
      }

      /*
      EXECUTION
      */
      init() {
        if (this.main) {
          this.action = this.main;
          this.status = this.action();
        }
        return this.status;
      }

      action() {
        var iter;
        if (this.init instanceof GeneratorFunction) {
          iter = this.init();
          this.action = function() {
            var result;
            result = iter.next();
            this.status = toStatus(result.value);
            return this.status;
          };
          return this.status = toStatus(this.action());
        } else {
          //else if @init instanceof AsyncFunction then @status = (await @init()) || TS_SUCCESS
          this.status = toStatus(this.init());
          if (this.main) {
            this.action = this.main;
            this.status = toStatus(this.action());
          }
          return this.status;
        }
      }

      schedule(t) {
        if (t.scheduled) {
          return t;
        }
        t.scheduled = true;
        //setImmediate ->
        nextTick(function() {
          var err;
          t.scheduled = false;
          try {
            return t.status = toStatus(t.action());
          } catch (error) {
            err = error;
            return t.reject(err);
          }
        });
        return t;
      }

      //Promise Support
      then(resolve, reject) {
        this.resolve = resolve;
        this.reject = reject;
        console.log('Then');
        this.status = toStatus(this.action());
        return this;
      }

      resolve() {
        return console.log('Promise Resolved');
      }

      reject(err) {
        console.log('Promise Rejected');
        throw err;
      }

      //TODO:  What if init is a generator???
      import(requirer, path) {
        return requirer(path).init.call(this);
      }

      /*
      DSL
      */
      chain(b) {
        var a;
        a = this.tasks[this.tasks.length - 1];
        if (a) {
          a.dst = b;
          b.src = a;
        }
        this.add(b);
        return this;
      }

      task(action) {
        var child;
        child = new Task(action);
        this.add(child);
        return this;
      }

      loop(action) {
        var child;
        child = new Loop(action);
        this.add(child);
        return this;
      }

      counter(from, to, action) {
        var child;
        child = new Counter(from, to, action);
        this.add(child);
        return this;
      }

      sequence(action) {
        var child;
        child = new Sequence(action);
        this.add(child);
        return this;
      }

      suspend() {
        return this.status = TS_SUSPENDED;
      }

      resume() {
        return this.status = TS_RUNNING;
      }

      succeed() {
        return this.status = TS_SUCCESS;
      }

      fail() {
        return this.status = TS_FAILURE;
      }

      broadcast(msg) {}

      post(msg) {
        msg.from = this;
        return this.rnr.post(msg);
      }

      spawn(o, wait = false) {
        var task;
        if (typeof o === 'function') {
          task = new Task(o);
        } else if (o instanceof Task) {
          task = o;
        } else {
          throw new Error('Expecting Function or Task');
        }
        if (wait) {
          task.caller = this;
        }
        return this.rnr.schedule(task);
      }

      call(s, p, o, x) {
        var c, m;
        c = new Achieve(s, p, o, x);
        m = new Attempt(c, this);
        m.caller = this;
        this.post(m);
        return this.suspend();
      }

      callSync(s, p, o, x) {
        var c, m;
        c = new Achieve(s, p, o, x);
        m = new Attempt(c, this);
        m.caller = this;
        this.post(m);
        return this.suspend();
      }

      perform(s, p, o, x) {
        var c, m;
        c = new Achieve(s, p, o, x);
        m = new Attempt(c, this);
        return this.post(m);
      }

      propose(c) {
        return this.post(new Propose(c, this));
      }

      attempt(c) {
        return this.post(new Attempt(c, this));
      }

      assert(c) {
        return this.post(new Assert(c, this));
      }

      retract(c) {
        return this.post(new Retract(c, this));
      }

    };

    Task.property('parent', {
      get: function() {
        return this._parent;
      },
      set: function(parent) {
        this._parent = parent;
        if (this.policy) {
          return this.policy.parent = parent.policy;
        } else {
          return this.policy = parent.policy;
        }
      }
    });

    Task.property('msg', {
      get: function() {
        return this._msg;
      },
      set: function(msg) {
        this._msg = msg;
        return this.policy = msg.from.policy;
      }
    });

    return Task;

  }).call(this);

  exports.Task = Task;

  exports.task_ = function(action) {
    return new Task(action);
  };

  
  Impostor = class Impostor extends Task {
    constructor(identity, action) {
      super(action);
      this.identity = identity;
    }

    def(trigger, action) {
      return this.identity.def(trigger, action);
    }

  };

  exports.Impostor = Impostor;

  
  Chain = class Chain extends Task {
    constructor(action) {
      super(action);
    }

    main() {
      var child;
      child = this.tasks[0];
      this.rnr.schedule(child);
      return this.suspend();
    }

    strategy(child) {
      this.remove(child);
      if (child.status === TS_FAILURE) {
        return this.fail();
      }
      if (child.dst) {
        return this.rnr.schedule(child.dst);
      }
    }

  };

  //@resume()
  exports.Chain = Chain;

  exports.chain_ = function(action) {
    return new Chain(action);
  };

  Parallel = class Parallel extends Task {
    constructor(action) {
      super(action);
    }

    main() {
      var child, i, len, ref;
      ref = this.tasks;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        this.rnr.schedule(child);
      }
      return this.suspend();
    }

    strategy(child) {
      this.remove(child);
      if (child.status === TS_FAILURE) {
        return this.fail();
      }
      //else
      return this.resume();
    }

  };

  exports.Parallel = Parallel;

  
  //Loop

  Loop = class Loop extends Task {
    constructor(action) {
      super(action);
    }

    main() {
      var child;
      child = this.tasks.shift();
      this.tasks.push(child);
      //else
      this.rnr.schedule(child);
      return this.suspend();
    }

    strategy(child) {
      if (child.status === TS_FAILURE) {
        return this.fail();
      }
      //else
      return this.resume();
    }

  };

  exports.Loop = Loop;

  
  //Counter

  Counter = class Counter extends Task {
    constructor(from, to, action) {
      super(action);
      this.value = from;
      this.to = to;
      this.index = 0;
    }

    main() {
      var child;
      child = this.tasks[this.index];
      if (child === void 0) {
        child = this.tasks[this.index = 0];
      }
      //else
      this.rnr.schedule(child);
      return this.suspend();
    }

    strategy(child) {
      this.index++;
      if (child.status === TS_FAILURE) {
        return this.fail();
      }
      //else
      if (this.value++ === this.to) {
        return this.succeed();
      }
      //else
      return this.resume();
    }

  };

  exports.Counter = Counter;

  
  //Sequence

  Sequence = class Sequence extends Task {
    constructor(action) {
      super(action);
    }

    main() {
      var child;
      child = this.tasks.shift();
      if (child === void 0) {
        return this.succeed();
      }
      //else
      this.rnr.schedule(child);
      return this.suspend();
    }

    strategy(child) {
      if (child.status === TS_FAILURE) {
        return this.fail();
      }
      //else
      if (this.tasks.length > 0) {
        return this.resume();
      }
      //else
      return this.succeed();
    }

  };

  exports.Sequence = Sequence;

  
  Method = class Method extends Sequence {
    constructor(action) {
      super(action);
    }

  };

  exports.Method = Method;

  exports.method_ = function(action) {
    return new Method(action);
  };

  
  //Module

  Module = class Module extends Method {
    constructor(action) {
      super(action);
    }

  };

  exports.Module = Module;

  exports.module_ = function(action) {
    return new Module(action);
  };

  
  //Rule

  Rule = class Rule {
    constructor(t, a) {
      this.trigger = t;
      this.action = a;
    }

    match(msg) {
      var m, result, t;
      result = this.trigger.match(msg);
      if (!result) {
        return false;
      }
      t = new Method(this.action);
      m = clone(msg, result);
      m.rule = this;
      m.to = t;
      t.msg = m;
      t.caller = m.caller;
      return m;
    }

  };

  /*
  fire: (rnr, msg) ->
  t = new Method(@action)
  t.msg = msg
  t.caller = msg.caller
  rnr.schedule(t)
  */
  exports.Rule = Rule;

  exports.def = function(t, a) {
    return new Rule(t, a);
  };

  exports.sequence_ = function(action) {
    return new Sequence(action);
  };

  exports.counter_ = function(from, to, action) {
    return new Counter(from, to, action);
  };

  exports.parallel_ = function(action) {
    return new Parallel(action);
  };

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
