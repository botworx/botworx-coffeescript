(function() {

  /*
  exports.unitize = unitize = (_module) ->
    fileName = mmpackage.logDir + path.basename(_module.filename, '.js') + '.json'
    logger = new winston.Logger
      level: 'silly',
      transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: fileName })
      ]
    #hf _module
    return exports
   */
  var TestUnit, Unit, assert, chalk, header, hlength, mocha, path, winston;

  path = require('path');

  exports.assert = assert = require('chai').assert;

  exports.mocha = mocha = require('mocha');

  exports.winston = winston = require('winston');

  exports.chalk = chalk = require('chalk');

  ({Unit} = require('./unit'));

  header = function(text, chr, length) {
    var count, mod;
    count = Math.round(length / 2 - text.length / 2);
    mod = length % 2;
    return [Array(count).join(chr), text, Array(count).join(chr)].join(' ');
  };

  hlength = 80;

  TestUnit = class TestUnit extends Unit {
    constructor(parent) {
      super(parent);
    }

    tap() {
      beforeEach(() => {
        this.pushLogger();
        return this.$('Baba');
      });
      return afterEach(() => {
        this.$('Yaga');
        return this.popLogger();
      });
    }

    pushLogger() {
      var fileName, logger;
      fileName = this.logPath(path.basename(this.filename, '.js') + '.json');
      logger = new winston.Logger({
        level: 'silly',
        transports: [
          new winston.transports.Console(),
          new winston.transports.File({
            filename: fileName
          })
        ]
      });
      return super.pushLogger(logger);
    }

    dataPath(filename) {
      return path.join(this.dirname, '../data/', filename);
    }

    logPath(filename) {
      return path.join(this.dirname, '../report/log/', filename);
    }

    h1(text) {
      return this.log(header(text, '*', hlength));
    }

    h2(text) {
      return this.log(header(text, '-', hlength));
    }

    //@log chalk.red('\t' + text)
    h3(text) {
      return this.log(header(text, '-', hlength));
    }

    h4(text) {
      return this.log(header(text, '-', hlength));
    }

    $(text) {
      return this.log(chalk.red(text));
    }

    hf() {
      return this.h1(this.basename);
    }

  };

  exports.TestUnit = TestUnit;

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC90ZXN0dW5pdC5qcyIsInNvdXJjZXMiOlsidW5pdC90ZXN0dW5pdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTs7Ozs7Ozs7Ozs7OztNQUFBLFFBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUE7O0VBQUEsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSOztFQUNQLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLE1BQUEsR0FBUyxPQUFBLENBQVEsTUFBUixDQUFlLENBQUM7O0VBQzFDLE9BQU8sQ0FBQyxLQUFSLEdBQWdCLEtBQUEsR0FBUSxPQUFBLENBQVEsT0FBUjs7RUFDeEIsT0FBTyxDQUFDLE9BQVIsR0FBa0IsT0FBQSxHQUFVLE9BQUEsQ0FBUSxTQUFSOztFQUM1QixPQUFPLENBQUMsS0FBUixHQUFnQixLQUFBLEdBQVEsT0FBQSxDQUFRLE9BQVI7O0VBRXhCLENBQUEsQ0FBQyxJQUFELENBQUEsR0FBUyxPQUFBLENBQVEsUUFBUixDQUFUOztFQWNBLE1BQUEsR0FBUyxRQUFBLENBQUMsSUFBRCxFQUFPLEdBQVAsRUFBWSxNQUFaLENBQUE7QUFDUCxRQUFBLEtBQUEsRUFBQTtJQUFBLEtBQUEsR0FBUSxJQUFJLENBQUMsS0FBTCxDQUFXLE1BQUEsR0FBTyxDQUFQLEdBQVcsSUFBSSxDQUFDLE1BQUwsR0FBWSxDQUFsQztJQUNSLEdBQUEsR0FBTSxNQUFBLEdBQVM7V0FDZixDQUNFLEtBQUEsQ0FBTSxLQUFOLENBQVksQ0FBQyxJQUFiLENBQWtCLEdBQWxCLENBREYsRUFFRSxJQUZGLEVBR0UsS0FBQSxDQUFNLEtBQU4sQ0FBWSxDQUFDLElBQWIsQ0FBa0IsR0FBbEIsQ0FIRixDQUlDLENBQUMsSUFKRixDQUlPLEdBSlA7RUFITzs7RUFTVCxPQUFBLEdBQVU7O0VBRUosV0FBTixNQUFBLFNBQUEsUUFBdUIsS0FBdkI7SUFDRSxXQUFhLENBQUMsTUFBRCxDQUFBO1dBQ1gsQ0FBTSxNQUFOO0lBRFc7O0lBRWIsR0FBSyxDQUFBLENBQUE7TUFDSCxVQUFBLENBQVcsQ0FBQSxDQUFBLEdBQUE7UUFDVCxJQUFDLENBQUEsVUFBRCxDQUFBO2VBQ0EsSUFBQyxDQUFBLENBQUQsQ0FBRyxNQUFIO01BRlMsQ0FBWDthQUdBLFNBQUEsQ0FBVSxDQUFBLENBQUEsR0FBQTtRQUNSLElBQUMsQ0FBQSxDQUFELENBQUcsTUFBSDtlQUNBLElBQUMsQ0FBQSxTQUFELENBQUE7TUFGUSxDQUFWO0lBSkc7O0lBUUwsVUFBWSxDQUFBLENBQUE7QUFDVixVQUFBLFFBQUEsRUFBQTtNQUFBLFFBQUEsR0FBVyxJQUFDLENBQUEsT0FBRCxDQUFTLElBQUksQ0FBQyxRQUFMLENBQWMsSUFBQyxDQUFBLFFBQWYsRUFBeUIsS0FBekIsQ0FBQSxHQUFrQyxPQUEzQztNQUNYLE1BQUEsR0FBUyxJQUFJLE9BQU8sQ0FBQyxNQUFaLENBQ1A7UUFBQSxLQUFBLEVBQU8sT0FBUDtRQUNBLFVBQUEsRUFBWTtVQUNWLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUF2QixDQUFBLENBRFU7VUFFVixJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBdkIsQ0FBNEI7WUFBRSxRQUFBLEVBQVU7VUFBWixDQUE1QixDQUZVOztNQURaLENBRE87a0JBRlgsQ0FBQSxVQVFFLENBQU0sTUFBTjtJQVJVOztJQVVaLFFBQVUsQ0FBQyxRQUFELENBQUE7YUFDUixJQUFJLENBQUMsSUFBTCxDQUFVLElBQUMsQ0FBQSxPQUFYLEVBQW9CLFVBQXBCLEVBQWdDLFFBQWhDO0lBRFE7O0lBRVYsT0FBUyxDQUFDLFFBQUQsQ0FBQTthQUNQLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBQyxDQUFBLE9BQVgsRUFBb0IsZ0JBQXBCLEVBQXNDLFFBQXRDO0lBRE87O0lBRVQsRUFBSSxDQUFDLElBQUQsQ0FBQTthQUNGLElBQUMsQ0FBQSxHQUFELENBQUssTUFBQSxDQUFPLElBQVAsRUFBYSxHQUFiLEVBQWtCLE9BQWxCLENBQUw7SUFERTs7SUFFSixFQUFJLENBQUMsSUFBRCxDQUFBO2FBQ0YsSUFBQyxDQUFBLEdBQUQsQ0FBSyxNQUFBLENBQU8sSUFBUCxFQUFhLEdBQWIsRUFBa0IsT0FBbEIsQ0FBTDtJQURFLENBMUJKOzs7SUE2QkEsRUFBSSxDQUFDLElBQUQsQ0FBQTthQUNGLElBQUMsQ0FBQSxHQUFELENBQUssTUFBQSxDQUFPLElBQVAsRUFBYSxHQUFiLEVBQWtCLE9BQWxCLENBQUw7SUFERTs7SUFFSixFQUFJLENBQUMsSUFBRCxDQUFBO2FBQ0YsSUFBQyxDQUFBLEdBQUQsQ0FBSyxNQUFBLENBQU8sSUFBUCxFQUFhLEdBQWIsRUFBa0IsT0FBbEIsQ0FBTDtJQURFOztJQUVKLENBQUcsQ0FBQyxJQUFELENBQUE7YUFDRCxJQUFDLENBQUEsR0FBRCxDQUFLLEtBQUssQ0FBQyxHQUFOLENBQVUsSUFBVixDQUFMO0lBREM7O0lBRUgsRUFBSSxDQUFBLENBQUE7YUFDRixJQUFDLENBQUEsRUFBRCxDQUFJLElBQUMsQ0FBQSxRQUFMO0lBREU7O0VBcENOOztFQXVDQSxPQUFPLENBQUMsUUFBUixHQUFtQjtBQXRFbkIiLCJzb3VyY2VzQ29udGVudCI6WyJwYXRoID0gcmVxdWlyZSAncGF0aCdcbmV4cG9ydHMuYXNzZXJ0ID0gYXNzZXJ0ID0gcmVxdWlyZSgnY2hhaScpLmFzc2VydFxuZXhwb3J0cy5tb2NoYSA9IG1vY2hhID0gcmVxdWlyZSAnbW9jaGEnXG5leHBvcnRzLndpbnN0b24gPSB3aW5zdG9uID0gcmVxdWlyZSAnd2luc3RvbidcbmV4cG9ydHMuY2hhbGsgPSBjaGFsayA9IHJlcXVpcmUgJ2NoYWxrJ1xuXG57VW5pdH0gPSByZXF1aXJlICcuL3VuaXQnXG4jIyNcbmV4cG9ydHMudW5pdGl6ZSA9IHVuaXRpemUgPSAoX21vZHVsZSkgLT5cbiAgZmlsZU5hbWUgPSBtbXBhY2thZ2UubG9nRGlyICsgcGF0aC5iYXNlbmFtZShfbW9kdWxlLmZpbGVuYW1lLCAnLmpzJykgKyAnLmpzb24nXG4gIGxvZ2dlciA9IG5ldyB3aW5zdG9uLkxvZ2dlclxuICAgIGxldmVsOiAnc2lsbHknLFxuICAgIHRyYW5zcG9ydHM6IFtcbiAgICAgIG5ldyB3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSgpLFxuICAgICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5GaWxlKHsgZmlsZW5hbWU6IGZpbGVOYW1lIH0pXG4gICAgXVxuICAjaGYgX21vZHVsZVxuICByZXR1cm4gZXhwb3J0c1xuIyMjXG5cbmhlYWRlciA9ICh0ZXh0LCBjaHIsIGxlbmd0aCkgLT5cbiAgY291bnQgPSBNYXRoLnJvdW5kKGxlbmd0aC8yIC0gdGV4dC5sZW5ndGgvMilcbiAgbW9kID0gbGVuZ3RoICUgMlxuICBbXG4gICAgQXJyYXkoY291bnQpLmpvaW4oY2hyKVxuICAgIHRleHRcbiAgICBBcnJheShjb3VudCkuam9pbihjaHIpXG4gIF0uam9pbiAnICdcblxuaGxlbmd0aCA9IDgwXG5cbmNsYXNzIFRlc3RVbml0IGV4dGVuZHMgVW5pdFxuICBjb25zdHJ1Y3RvcjogKHBhcmVudCkgLT5cbiAgICBzdXBlciBwYXJlbnRcbiAgdGFwOiAtPlxuICAgIGJlZm9yZUVhY2ggPT5cbiAgICAgIEBwdXNoTG9nZ2VyKClcbiAgICAgIEAkICdCYWJhJ1xuICAgIGFmdGVyRWFjaCA9PlxuICAgICAgQCQgJ1lhZ2EnXG4gICAgICBAcG9wTG9nZ2VyKClcblxuICBwdXNoTG9nZ2VyOiAtPlxuICAgIGZpbGVOYW1lID0gQGxvZ1BhdGgocGF0aC5iYXNlbmFtZShAZmlsZW5hbWUsICcuanMnKSArICcuanNvbicpXG4gICAgbG9nZ2VyID0gbmV3IHdpbnN0b24uTG9nZ2VyXG4gICAgICBsZXZlbDogJ3NpbGx5JyxcbiAgICAgIHRyYW5zcG9ydHM6IFtcbiAgICAgICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5Db25zb2xlKCksXG4gICAgICAgIG5ldyB3aW5zdG9uLnRyYW5zcG9ydHMuRmlsZSh7IGZpbGVuYW1lOiBmaWxlTmFtZSB9KVxuICAgICAgXVxuICAgIHN1cGVyIGxvZ2dlclxuXG4gIGRhdGFQYXRoOiAoZmlsZW5hbWUpIC0+XG4gICAgcGF0aC5qb2luKEBkaXJuYW1lLCAnLi4vZGF0YS8nLCBmaWxlbmFtZSlcbiAgbG9nUGF0aDogKGZpbGVuYW1lKSAtPlxuICAgIHBhdGguam9pbihAZGlybmFtZSwgJy4uL3JlcG9ydC9sb2cvJywgZmlsZW5hbWUpXG4gIGgxOiAodGV4dCkgLT5cbiAgICBAbG9nIGhlYWRlcih0ZXh0LCAnKicsIGhsZW5ndGgpXG4gIGgyOiAodGV4dCkgLT5cbiAgICBAbG9nIGhlYWRlcih0ZXh0LCAnLScsIGhsZW5ndGgpXG4gICAgI0Bsb2cgY2hhbGsucmVkKCdcXHQnICsgdGV4dClcbiAgaDM6ICh0ZXh0KSAtPlxuICAgIEBsb2cgaGVhZGVyKHRleHQsICctJywgaGxlbmd0aClcbiAgaDQ6ICh0ZXh0KSAtPlxuICAgIEBsb2cgaGVhZGVyKHRleHQsICctJywgaGxlbmd0aClcbiAgJDogKHRleHQpIC0+XG4gICAgQGxvZyBjaGFsay5yZWQodGV4dClcbiAgaGY6IC0+XG4gICAgQGgxIEBiYXNlbmFtZVxuXG5leHBvcnRzLlRlc3RVbml0ID0gVGVzdFVuaXRcbiJdfQ==
