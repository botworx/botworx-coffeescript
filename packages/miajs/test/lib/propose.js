(function() {
  var $$, Achieve, Assert, Attempt, Believe, Context, Message, Method, OnAssert, OnAttempt, OnRetract, Policy, Propose, Retract, Rule, Runner, Term, Trigger, _$, _Bob, _Fish, _Joe, _Peas, __, _buy, _catch, _eat, _get, _impasse, _likes, assert, module_, runtime, unit_;

  assert = require('chai').assert;

  ({unit_, runtime} = require('./common'));

  $$ = unit_(module);

  ({Term, Context, Propose, Attempt, Assert, Retract, Believe, Achieve} = runtime);

  ({__, _$, module_, _impasse, Message, Policy, Rule, Trigger, OnAssert, OnRetract, OnAttempt, Runner, Method} = runtime);

  ({_Bob, _Joe, _likes, _Fish, _Peas, _get, _catch, _buy, _eat} = require('./common'));

  describe('Propose', function() {
    return it('should work', function() {
      var c1, c2, ctx, m, rnr;
      ctx = new Context();
      c1 = new Believe(_Bob, _likes, _Fish);
      ctx.add(c1);
      c2 = new Believe(_Joe, _likes, _Peas);
      ctx.add(c2);
      $$.$("All Clauses");
      $$._(String(ctx));
      m = new Propose(new Achieve(_Bob, _eat, _Fish));
      $$.$('Begin Task Execution');
      rnr = new Runner();
      rnr.def(new Trigger(Attempt, Achieve, __, _eat, _Fish), function() {
        var $x;
        $x = this.msg.data.subj;
        return $$._(`${$x} buying Fish`);
      });
      rnr.def(new Trigger(Attempt, Achieve, __, _eat, _Fish), function() {
        var $x;
        $x = this.msg.data.subj;
        return $$._(`${$x} catching Fish`);
      });
      rnr.def(new Trigger(Attempt, Achieve, null, _impasse, null), function() {
        //$$._ String(@rnr.ctx)
        return $$._('Impassed');
      });
      rnr.post(m);
      return rnr.run();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcG9zZS5qcyIsInNvdXJjZXMiOlsicHJvcG9zZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFBLENBQVEsTUFBUixDQUFlLENBQUM7O0VBQ3pCLENBQUEsQ0FBQyxLQUFELEVBQVEsT0FBUixDQUFBLEdBQW1CLE9BQUEsQ0FBUSxVQUFSLENBQW5COztFQUNBLEVBQUEsR0FBSyxLQUFBLENBQU0sTUFBTjs7RUFDTCxDQUFBLENBQUMsSUFBRCxFQUFPLE9BQVAsRUFBZ0IsT0FBaEIsRUFBeUIsT0FBekIsRUFBa0MsTUFBbEMsRUFBMEMsT0FBMUMsRUFBbUQsT0FBbkQsRUFBNEQsT0FBNUQsQ0FBQSxHQUF1RSxPQUF2RTs7RUFDQSxDQUFBLENBQUMsRUFBRCxFQUFLLEVBQUwsRUFBUyxPQUFULEVBQWtCLFFBQWxCLEVBQTRCLE9BQTVCLEVBQXFDLE1BQXJDLEVBQTZDLElBQTdDLEVBQW1ELE9BQW5ELEVBQTRELFFBQTVELEVBQXNFLFNBQXRFLEVBQWlGLFNBQWpGLEVBQTRGLE1BQTVGLEVBQW9HLE1BQXBHLENBQUEsR0FBOEcsT0FBOUc7O0VBQ0EsQ0FBQSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsTUFBYixFQUFxQixLQUFyQixFQUE0QixLQUE1QixFQUFtQyxJQUFuQyxFQUF5QyxNQUF6QyxFQUFpRCxJQUFqRCxFQUF1RCxJQUF2RCxDQUFBLEdBQStELE9BQUEsQ0FBUSxVQUFSLENBQS9EOztFQUVBLFFBQUEsQ0FBUyxTQUFULEVBQW9CLFFBQUEsQ0FBQSxDQUFBO1dBQ2xCLEVBQUEsQ0FBRyxhQUFILEVBQWtCLFFBQUEsQ0FBQSxDQUFBO0FBQ2hCLFVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBO01BQUEsR0FBQSxHQUFNLElBQUksT0FBSixDQUFBO01BQ04sRUFBQSxHQUFLLElBQUksT0FBSixDQUFZLElBQVosRUFBa0IsTUFBbEIsRUFBMEIsS0FBMUI7TUFDTCxHQUFHLENBQUMsR0FBSixDQUFRLEVBQVI7TUFDQSxFQUFBLEdBQUssSUFBSSxPQUFKLENBQVksSUFBWixFQUFrQixNQUFsQixFQUEwQixLQUExQjtNQUNMLEdBQUcsQ0FBQyxHQUFKLENBQVEsRUFBUjtNQUVBLEVBQUUsQ0FBQyxDQUFILENBQUssYUFBTDtNQUNBLEVBQUUsQ0FBQyxDQUFILENBQUssTUFBQSxDQUFPLEdBQVAsQ0FBTDtNQUVBLENBQUEsR0FBSSxJQUFJLE9BQUosQ0FBWSxJQUFJLE9BQUosQ0FBWSxJQUFaLEVBQWtCLElBQWxCLEVBQXdCLEtBQXhCLENBQVo7TUFFSixFQUFFLENBQUMsQ0FBSCxDQUFLLHNCQUFMO01BQ0EsR0FBQSxHQUFNLElBQUksTUFBSixDQUFBO01BRU4sR0FBRyxDQUFDLEdBQUosQ0FBUSxJQUFJLE9BQUosQ0FBWSxPQUFaLEVBQXFCLE9BQXJCLEVBQThCLEVBQTlCLEVBQWtDLElBQWxDLEVBQXdDLEtBQXhDLENBQVIsRUFBd0QsUUFBQSxDQUFBLENBQUE7QUFDdEQsWUFBQTtRQUFBLEVBQUEsR0FBSyxJQUFDLENBQUEsR0FBRyxDQUFDLElBQUksQ0FBQztlQUNmLEVBQUUsQ0FBQyxDQUFILENBQUssQ0FBQSxDQUFBLENBQUcsRUFBSCxDQUFNLFlBQU4sQ0FBTDtNQUZzRCxDQUF4RDtNQUlBLEdBQUcsQ0FBQyxHQUFKLENBQVEsSUFBSSxPQUFKLENBQVksT0FBWixFQUFxQixPQUFyQixFQUE4QixFQUE5QixFQUFrQyxJQUFsQyxFQUF3QyxLQUF4QyxDQUFSLEVBQXdELFFBQUEsQ0FBQSxDQUFBO0FBQ3RELFlBQUE7UUFBQSxFQUFBLEdBQUssSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUM7ZUFDZixFQUFFLENBQUMsQ0FBSCxDQUFLLENBQUEsQ0FBQSxDQUFHLEVBQUgsQ0FBTSxjQUFOLENBQUw7TUFGc0QsQ0FBeEQ7TUFJQSxHQUFHLENBQUMsR0FBSixDQUFRLElBQUksT0FBSixDQUFZLE9BQVosRUFBcUIsT0FBckIsRUFBOEIsSUFBOUIsRUFBb0MsUUFBcEMsRUFBOEMsSUFBOUMsQ0FBUixFQUE2RCxRQUFBLENBQUEsQ0FBQSxFQUFBOztlQUUzRCxFQUFFLENBQUMsQ0FBSCxDQUFLLFVBQUw7TUFGMkQsQ0FBN0Q7TUFJQSxHQUFHLENBQUMsSUFBSixDQUFTLENBQVQ7YUFDQSxHQUFHLENBQUMsR0FBSixDQUFBO0lBNUJnQixDQUFsQjtFQURrQixDQUFwQjtBQVBBIiwic291cmNlc0NvbnRlbnQiOlsiYXNzZXJ0ID0gcmVxdWlyZSgnY2hhaScpLmFzc2VydFxue3VuaXRfLCBydW50aW1lfSA9IHJlcXVpcmUoJy4vY29tbW9uJylcbiQkID0gdW5pdF8gbW9kdWxlXG57VGVybSwgQ29udGV4dCwgUHJvcG9zZSwgQXR0ZW1wdCwgQXNzZXJ0LCBSZXRyYWN0LCBCZWxpZXZlLCBBY2hpZXZlfSA9IHJ1bnRpbWVcbntfXywgXyQsIG1vZHVsZV8sIF9pbXBhc3NlLCBNZXNzYWdlLCBQb2xpY3ksIFJ1bGUsIFRyaWdnZXIsIE9uQXNzZXJ0LCBPblJldHJhY3QsIE9uQXR0ZW1wdCwgUnVubmVyLCBNZXRob2R9ID0gcnVudGltZVxue19Cb2IsIF9Kb2UsIF9saWtlcywgX0Zpc2gsIF9QZWFzLCBfZ2V0LCBfY2F0Y2gsIF9idXksIF9lYXR9ID0gcmVxdWlyZSgnLi9jb21tb24nKVxuXG5kZXNjcmliZSAnUHJvcG9zZScsIC0+XG4gIGl0ICdzaG91bGQgd29yaycsIC0+XG4gICAgY3R4ID0gbmV3IENvbnRleHQoKVxuICAgIGMxID0gbmV3IEJlbGlldmUoX0JvYiwgX2xpa2VzLCBfRmlzaClcbiAgICBjdHguYWRkKGMxKVxuICAgIGMyID0gbmV3IEJlbGlldmUoX0pvZSwgX2xpa2VzLCBfUGVhcylcbiAgICBjdHguYWRkKGMyKVxuXG4gICAgJCQuJCBcIkFsbCBDbGF1c2VzXCJcbiAgICAkJC5fIFN0cmluZyhjdHgpXG5cbiAgICBtID0gbmV3IFByb3Bvc2UobmV3IEFjaGlldmUoX0JvYiwgX2VhdCwgX0Zpc2gpKVxuXG4gICAgJCQuJCAnQmVnaW4gVGFzayBFeGVjdXRpb24nXG4gICAgcm5yID0gbmV3IFJ1bm5lcigpXG5cbiAgICBybnIuZGVmIG5ldyBUcmlnZ2VyKEF0dGVtcHQsIEFjaGlldmUsIF9fLCBfZWF0LCBfRmlzaCksIC0+XG4gICAgICAkeCA9IEBtc2cuZGF0YS5zdWJqXG4gICAgICAkJC5fIFwiI3skeH0gYnV5aW5nIEZpc2hcIlxuXG4gICAgcm5yLmRlZiBuZXcgVHJpZ2dlcihBdHRlbXB0LCBBY2hpZXZlLCBfXywgX2VhdCwgX0Zpc2gpLCAtPlxuICAgICAgJHggPSBAbXNnLmRhdGEuc3VialxuICAgICAgJCQuXyBcIiN7JHh9IGNhdGNoaW5nIEZpc2hcIlxuXG4gICAgcm5yLmRlZiBuZXcgVHJpZ2dlcihBdHRlbXB0LCBBY2hpZXZlLCBudWxsLCBfaW1wYXNzZSwgbnVsbCksIC0+XG4gICAgICAjJCQuXyBTdHJpbmcoQHJuci5jdHgpXG4gICAgICAkJC5fICdJbXBhc3NlZCdcblxuICAgIHJuci5wb3N0KG0pXG4gICAgcm5yLnJ1bigpXG4iXX0=
