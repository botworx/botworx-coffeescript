(function() {
  var $$, Achieve, Assert, Attempt, Believe, Context, Message, Method, OnAssert, OnAttempt, OnRetract, Policy, Retract, Rule, Runner, Term, Trigger, _, _$, _$self, _Bob, _Fish, _Joe, _Peas, __, _get, _likes, assert, module_, runtime, unit_;

  assert = require('chai').assert;

  ({unit_, runtime} = require('./common'));

  $$ = unit_(module);

  ({Term, Context, Assert, Retract, Believe, Attempt, Achieve} = runtime);

  ({_, __, _$, module_, _$self, Message, Policy, Rule, Trigger, OnAssert, OnRetract, OnAttempt, Runner, Method} = runtime);

  ({_Bob, _Joe, _likes, _Fish, _Peas, _get} = require('./common'));

  describe('Attempt', function() {
    return it('should work', function() {
      var c, c1, c2, ctx, i, len, m, ref, rnr;
      ctx = new Context();
      c1 = new Believe(_Bob, _likes, _Fish);
      ctx.add(c1);
      c2 = new Believe(_Joe, _likes, _Peas);
      ctx.add(c2);
      $$.$("All Clauses");
      ref = ctx.clauses;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        $$._(c.toString());
      }
      m = new Attempt(new Achieve(_Bob, _get, _Fish));
      $$.$('Begin Task Execution');
      rnr = new Runner();
      rnr.def(new Trigger(Attempt, Achieve, __, _get, _Fish), function() {
        var $x;
        $x = this.msg.data.subj;
        return $$._(`${$x} getting Fish`);
      });
      rnr.post(m);
      return rnr.run();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0ZW1wdC5qcyIsInNvdXJjZXMiOlsiYXR0ZW1wdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFBLENBQVEsTUFBUixDQUFlLENBQUM7O0VBQ3pCLENBQUEsQ0FBQyxLQUFELEVBQVEsT0FBUixDQUFBLEdBQW1CLE9BQUEsQ0FBUSxVQUFSLENBQW5COztFQUNBLEVBQUEsR0FBSyxLQUFBLENBQU0sTUFBTjs7RUFDTCxDQUFBLENBQUMsSUFBRCxFQUFPLE9BQVAsRUFBZ0IsTUFBaEIsRUFBd0IsT0FBeEIsRUFBaUMsT0FBakMsRUFBMEMsT0FBMUMsRUFBbUQsT0FBbkQsQ0FBQSxHQUE4RCxPQUE5RDs7RUFDQSxDQUFBLENBQUMsQ0FBRCxFQUFJLEVBQUosRUFBUSxFQUFSLEVBQVksT0FBWixFQUFxQixNQUFyQixFQUE2QixPQUE3QixFQUFzQyxNQUF0QyxFQUE4QyxJQUE5QyxFQUFvRCxPQUFwRCxFQUE2RCxRQUE3RCxFQUF1RSxTQUF2RSxFQUFrRixTQUFsRixFQUE2RixNQUE3RixFQUFxRyxNQUFyRyxDQUFBLEdBQStHLE9BQS9HOztFQUNBLENBQUEsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLE1BQWIsRUFBcUIsS0FBckIsRUFBNEIsS0FBNUIsRUFBbUMsSUFBbkMsQ0FBQSxHQUEyQyxPQUFBLENBQVEsVUFBUixDQUEzQzs7RUFFQSxRQUFBLENBQVMsU0FBVCxFQUFvQixRQUFBLENBQUEsQ0FBQTtXQUNsQixFQUFBLENBQUcsYUFBSCxFQUFrQixRQUFBLENBQUEsQ0FBQTtBQUNoQixVQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7TUFBQSxHQUFBLEdBQU0sSUFBSSxPQUFKLENBQUE7TUFDTixFQUFBLEdBQUssSUFBSSxPQUFKLENBQVksSUFBWixFQUFrQixNQUFsQixFQUEwQixLQUExQjtNQUNMLEdBQUcsQ0FBQyxHQUFKLENBQVEsRUFBUjtNQUNBLEVBQUEsR0FBSyxJQUFJLE9BQUosQ0FBWSxJQUFaLEVBQWtCLE1BQWxCLEVBQTBCLEtBQTFCO01BQ0wsR0FBRyxDQUFDLEdBQUosQ0FBUSxFQUFSO01BRUEsRUFBRSxDQUFDLENBQUgsQ0FBSyxhQUFMO0FBQ0E7TUFBQSxLQUFBLHFDQUFBOztRQUNFLEVBQUUsQ0FBQyxDQUFILENBQUssQ0FBQyxDQUFDLFFBQUYsQ0FBQSxDQUFMO01BREY7TUFHQSxDQUFBLEdBQUksSUFBSSxPQUFKLENBQVksSUFBSSxPQUFKLENBQVksSUFBWixFQUFrQixJQUFsQixFQUF3QixLQUF4QixDQUFaO01BRUosRUFBRSxDQUFDLENBQUgsQ0FBSyxzQkFBTDtNQUNBLEdBQUEsR0FBTSxJQUFJLE1BQUosQ0FBQTtNQUVOLEdBQUcsQ0FBQyxHQUFKLENBQVEsSUFBSSxPQUFKLENBQVksT0FBWixFQUFxQixPQUFyQixFQUE4QixFQUE5QixFQUFrQyxJQUFsQyxFQUF3QyxLQUF4QyxDQUFSLEVBQXdELFFBQUEsQ0FBQSxDQUFBO0FBQ3RELFlBQUE7UUFBQSxFQUFBLEdBQUssSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUM7ZUFDZixFQUFFLENBQUMsQ0FBSCxDQUFLLENBQUEsQ0FBQSxDQUFHLEVBQUgsQ0FBTSxhQUFOLENBQUw7TUFGc0QsQ0FBeEQ7TUFJQSxHQUFHLENBQUMsSUFBSixDQUFTLENBQVQ7YUFDQSxHQUFHLENBQUMsR0FBSixDQUFBO0lBckJnQixDQUFsQjtFQURrQixDQUFwQjtBQVBBIiwic291cmNlc0NvbnRlbnQiOlsiYXNzZXJ0ID0gcmVxdWlyZSgnY2hhaScpLmFzc2VydFxue3VuaXRfLCBydW50aW1lfSA9IHJlcXVpcmUoJy4vY29tbW9uJylcbiQkID0gdW5pdF8gbW9kdWxlXG57VGVybSwgQ29udGV4dCwgQXNzZXJ0LCBSZXRyYWN0LCBCZWxpZXZlLCBBdHRlbXB0LCBBY2hpZXZlfSA9IHJ1bnRpbWVcbntfLCBfXywgXyQsIG1vZHVsZV8sIF8kc2VsZiwgTWVzc2FnZSwgUG9saWN5LCBSdWxlLCBUcmlnZ2VyLCBPbkFzc2VydCwgT25SZXRyYWN0LCBPbkF0dGVtcHQsIFJ1bm5lciwgTWV0aG9kfSA9IHJ1bnRpbWVcbntfQm9iLCBfSm9lLCBfbGlrZXMsIF9GaXNoLCBfUGVhcywgX2dldH0gPSByZXF1aXJlKCcuL2NvbW1vbicpXG5cbmRlc2NyaWJlICdBdHRlbXB0JywgLT5cbiAgaXQgJ3Nob3VsZCB3b3JrJywgLT5cbiAgICBjdHggPSBuZXcgQ29udGV4dCgpXG4gICAgYzEgPSBuZXcgQmVsaWV2ZShfQm9iLCBfbGlrZXMsIF9GaXNoKVxuICAgIGN0eC5hZGQoYzEpXG4gICAgYzIgPSBuZXcgQmVsaWV2ZShfSm9lLCBfbGlrZXMsIF9QZWFzKVxuICAgIGN0eC5hZGQoYzIpXG5cbiAgICAkJC4kIFwiQWxsIENsYXVzZXNcIlxuICAgIGZvciBjIGluIGN0eC5jbGF1c2VzXG4gICAgICAkJC5fIGMudG9TdHJpbmcoKVxuXG4gICAgbSA9IG5ldyBBdHRlbXB0KG5ldyBBY2hpZXZlKF9Cb2IsIF9nZXQsIF9GaXNoKSlcblxuICAgICQkLiQgJ0JlZ2luIFRhc2sgRXhlY3V0aW9uJ1xuICAgIHJuciA9IG5ldyBSdW5uZXIoKVxuXG4gICAgcm5yLmRlZiBuZXcgVHJpZ2dlcihBdHRlbXB0LCBBY2hpZXZlLCBfXywgX2dldCwgX0Zpc2gpLCAtPlxuICAgICAgJHggPSBAbXNnLmRhdGEuc3VialxuICAgICAgJCQuXyBcIiN7JHh9IGdldHRpbmcgRmlzaFwiXG5cbiAgICBybnIucG9zdChtKVxuICAgIHJuci5ydW4oKVxuIl19
