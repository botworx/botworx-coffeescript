(function() {
  var ConsoleWriter, ReadFile, Runner, Task, build, chain_, project_, runtime, sourcer_, t, t1, t2, t3, t4, task_, workspace_;

  ({runtime} = require('./common'));

  ({task_, chain_, Runner, Task} = runtime);

  ({ReadFile, ConsoleWriter} = runtime.streamer);

  ({project_, workspace_, sourcer_, build} = runtime.project);

  t1 = workspace_({
    tasks: [
      project_({
        files: '*.txt',
        tasks: [
          task_(function() {
            return $$.h2('hello');
          })
        ]
      })
    ]
  });

  t2 = workspace_({
    tasks: [
      project_({
        files: '*.txt',
        tasks: [
          sourcer_(function(src) {
            return $$.h2(src);
          })
        ]
      })
    ]
  });

  t3 = workspace_({
    tasks: [
      project_({
        files: '*.txt',
        tasks: [
          sourcer_(function(src) {
            $$.h2(src);
            return this.spawn(function() {
              return console.log('hello');
            });
          })
        ]
      })
    ]
  });

  t4 = workspace_({
    tasks: [
      project_({
        files: '*.txt',
        tasks: [
          sourcer_(function(src) {
            $$.h2(src);
            return this.spawn(chain_(function() {
              return this.chain(new ReadFile(src)).chain(new ConsoleWriter);
            }));
          })
        ]
      })
    ]
  });

  //rnr = new Runner()
  //rnr.run(t1)
  t = t4;

  console.log(t);

  t.run();

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC90YXNrcy5qcyIsInNvdXJjZXMiOlsicHJvamVjdC90YXNrcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLGFBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsS0FBQSxFQUFBOztFQUFBLENBQUEsQ0FBQyxPQUFELENBQUEsR0FBWSxPQUFBLENBQVEsVUFBUixDQUFaOztFQUNBLENBQUEsQ0FBQyxLQUFELEVBQVEsTUFBUixFQUFnQixNQUFoQixFQUF3QixJQUF4QixDQUFBLEdBQWdDLE9BQWhDOztFQUNBLENBQUEsQ0FBQyxRQUFELEVBQVcsYUFBWCxDQUFBLEdBQTRCLE9BQU8sQ0FBQyxRQUFwQzs7RUFDQSxDQUFBLENBQUMsUUFBRCxFQUFXLFVBQVgsRUFBdUIsUUFBdkIsRUFBaUMsS0FBakMsQ0FBQSxHQUEwQyxPQUFPLENBQUMsT0FBbEQ7O0VBRUEsRUFBQSxHQUFLLFVBQUEsQ0FDSDtJQUFBLEtBQUEsRUFBTztNQUNMLFFBQUEsQ0FDRTtRQUFBLEtBQUEsRUFBTyxPQUFQO1FBQ0EsS0FBQSxFQUFPO1VBQ0wsS0FBQSxDQUFNLFFBQUEsQ0FBQSxDQUFBO21CQUNKLEVBQUUsQ0FBQyxFQUFILENBQU0sT0FBTjtVQURJLENBQU4sQ0FESzs7TUFEUCxDQURGLENBREs7O0VBQVAsQ0FERzs7RUFVTCxFQUFBLEdBQUssVUFBQSxDQUNIO0lBQUEsS0FBQSxFQUFPO01BQ0wsUUFBQSxDQUNFO1FBQUEsS0FBQSxFQUFPLE9BQVA7UUFDQSxLQUFBLEVBQU87VUFDTCxRQUFBLENBQVMsUUFBQSxDQUFDLEdBQUQsQ0FBQTttQkFDUCxFQUFFLENBQUMsRUFBSCxDQUFNLEdBQU47VUFETyxDQUFULENBREs7O01BRFAsQ0FERixDQURLOztFQUFQLENBREc7O0VBVUwsRUFBQSxHQUFLLFVBQUEsQ0FDSDtJQUFBLEtBQUEsRUFBTztNQUNMLFFBQUEsQ0FDRTtRQUFBLEtBQUEsRUFBTyxPQUFQO1FBQ0EsS0FBQSxFQUFPO1VBQ0wsUUFBQSxDQUFTLFFBQUEsQ0FBQyxHQUFELENBQUE7WUFDUCxFQUFFLENBQUMsRUFBSCxDQUFNLEdBQU47bUJBQ0EsSUFBQyxDQUFBLEtBQUQsQ0FBTyxRQUFBLENBQUEsQ0FBQTtxQkFDTCxPQUFPLENBQUMsR0FBUixDQUFZLE9BQVo7WUFESyxDQUFQO1VBRk8sQ0FBVCxDQURLOztNQURQLENBREYsQ0FESzs7RUFBUCxDQURHOztFQVlMLEVBQUEsR0FBSyxVQUFBLENBQ0g7SUFBQSxLQUFBLEVBQU87TUFDTCxRQUFBLENBQ0U7UUFBQSxLQUFBLEVBQU8sT0FBUDtRQUNBLEtBQUEsRUFBTztVQUNMLFFBQUEsQ0FBUyxRQUFBLENBQUMsR0FBRCxDQUFBO1lBQ1AsRUFBRSxDQUFDLEVBQUgsQ0FBTSxHQUFOO21CQUNBLElBQUMsQ0FBQSxLQUFELENBQU8sTUFBQSxDQUFPLFFBQUEsQ0FBQSxDQUFBO3FCQUNaLElBQUMsQ0FBQSxLQUFELENBQU8sSUFBSSxRQUFKLENBQWEsR0FBYixDQUFQLENBQ0EsQ0FBQyxLQURELENBQ08sSUFBSSxhQURYO1lBRFksQ0FBUCxDQUFQO1VBRk8sQ0FBVCxDQURLOztNQURQLENBREYsQ0FESzs7RUFBUCxDQURHLEVBckNMOzs7O0VBb0RBLENBQUEsR0FBSTs7RUFDSixPQUFPLENBQUMsR0FBUixDQUFZLENBQVo7O0VBQ0EsQ0FBQyxDQUFDLEdBQUYsQ0FBQTtBQXREQSIsInNvdXJjZXNDb250ZW50IjpbIntydW50aW1lfSA9IHJlcXVpcmUgJy4vY29tbW9uJ1xue3Rhc2tfLCBjaGFpbl8sIFJ1bm5lciwgVGFza30gPSBydW50aW1lXG57UmVhZEZpbGUsIENvbnNvbGVXcml0ZXJ9ID0gcnVudGltZS5zdHJlYW1lclxue3Byb2plY3RfLCB3b3Jrc3BhY2VfLCBzb3VyY2VyXywgYnVpbGR9ID0gcnVudGltZS5wcm9qZWN0XG5cbnQxID0gd29ya3NwYWNlX1xuICB0YXNrczogW1xuICAgIHByb2plY3RfXG4gICAgICBmaWxlczogJyoudHh0J1xuICAgICAgdGFza3M6IFtcbiAgICAgICAgdGFza18gLT5cbiAgICAgICAgICAkJC5oMiAnaGVsbG8nXG4gICAgICBdXG4gIF1cblxudDIgPSB3b3Jrc3BhY2VfXG4gIHRhc2tzOiBbXG4gICAgcHJvamVjdF9cbiAgICAgIGZpbGVzOiAnKi50eHQnXG4gICAgICB0YXNrczogW1xuICAgICAgICBzb3VyY2VyXyAoc3JjKSAtPlxuICAgICAgICAgICQkLmgyIHNyY1xuICAgICAgXVxuICBdXG5cbnQzID0gd29ya3NwYWNlX1xuICB0YXNrczogW1xuICAgIHByb2plY3RfXG4gICAgICBmaWxlczogJyoudHh0J1xuICAgICAgdGFza3M6IFtcbiAgICAgICAgc291cmNlcl8gKHNyYykgLT5cbiAgICAgICAgICAkJC5oMiBzcmNcbiAgICAgICAgICBAc3Bhd24gLT5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nICdoZWxsbydcbiAgICAgIF1cbiAgXVxuXG50NCA9IHdvcmtzcGFjZV9cbiAgdGFza3M6IFtcbiAgICBwcm9qZWN0X1xuICAgICAgZmlsZXM6ICcqLnR4dCdcbiAgICAgIHRhc2tzOiBbXG4gICAgICAgIHNvdXJjZXJfIChzcmMpIC0+XG4gICAgICAgICAgJCQuaDIgc3JjXG4gICAgICAgICAgQHNwYXduIGNoYWluXyAtPlxuICAgICAgICAgICAgQGNoYWluIG5ldyBSZWFkRmlsZSBzcmNcbiAgICAgICAgICAgIC5jaGFpbiBuZXcgQ29uc29sZVdyaXRlclxuICAgICAgXVxuICBdXG5cbiNybnIgPSBuZXcgUnVubmVyKClcbiNybnIucnVuKHQxKVxudCA9IHQ0XG5jb25zb2xlLmxvZyB0XG50LnJ1bigpXG4iXX0=
