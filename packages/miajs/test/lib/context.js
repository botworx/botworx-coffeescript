(function() {
  var $$, Believe, _$, _Bob, _Fish, _Joe, _Peas, __, _get, _likes, assert, believe_, c, c1, c2, context_, ctx, i, len, module_, ref, runtime, unit_;

  assert = require('chai').assert;

  ({unit_, runtime} = require('./common'));

  $$ = unit_(module);

  ({context_, Believe, believe_} = runtime);

  ({__, _$, module_} = runtime);

  ({_Bob, _Joe, _likes, _Fish, _Peas, _get} = require('./common'));

  ctx = context_();

  c1 = believe_(_Bob, _likes, _Fish);

  ctx.add(c1);

  c2 = believe_(_Joe, _likes, _Peas);

  ctx.add(c2);

  $$.$("All Clauses");

  ref = ctx.clauses;
  for (i = 0, len = ref.length; i < len; i++) {
    c = ref[i];
    $$._(c.toString());
  }

  describe('Context', function() {
    describe('@find', function() {
      return it('should work', function() {
        var r;
        r = ctx.find(Believe, _Bob, _likes, _Fish);
        $$.$("Bob, likes, Fish");
        $$._(r.toString());
        r = ctx.find(Believe, __, _likes, _Fish);
        $$.$("_, likes, Fish");
        $$._(r.toString());
        r = ctx.find(Believe, __, _likes, __);
        $$.$("_, likes, _");
        return $$._(r.toString());
      });
    });
    describe('@match', function() {
      it('should work', function() {
        var matches, r, results;
        matches = ctx.match(Believe, _Bob, _likes, _Fish);
        $$.$("Bob, likes, Fish");
        results = [];
        for (r of matches) {
          results.push($$._(r.toString()));
        }
        return results;
      });
      return it('should work', function() {
        var matches, r, results;
        matches = ctx.match(Believe, __, _likes, __);
        $$.$("ctx.match(__, _likes, __)");
        results = [];
        for (r of matches) {
          results.push($$._(r.toString()));
        }
        return results;
      });
    });
    return describe('@iterator', function() {
      return it('should work', function() {
        var results;
//ctx.forEach (c) -> $$._ c
        results = [];
        for (c of ctx) {
          results.push($$._(c));
        }
        return results;
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5qcyIsInNvdXJjZXMiOlsiY29udGV4dC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBQSxDQUFRLE1BQVIsQ0FBZSxDQUFDOztFQUN6QixDQUFBLENBQUMsS0FBRCxFQUFRLE9BQVIsQ0FBQSxHQUFtQixPQUFBLENBQVEsVUFBUixDQUFuQjs7RUFDQSxFQUFBLEdBQUssS0FBQSxDQUFNLE1BQU47O0VBQ0wsQ0FBQSxDQUFDLFFBQUQsRUFBVyxPQUFYLEVBQW9CLFFBQXBCLENBQUEsR0FBZ0MsT0FBaEM7O0VBQ0EsQ0FBQSxDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsT0FBVCxDQUFBLEdBQW9CLE9BQXBCOztFQUNBLENBQUEsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLE1BQWIsRUFBcUIsS0FBckIsRUFBNEIsS0FBNUIsRUFBbUMsSUFBbkMsQ0FBQSxHQUEyQyxPQUFBLENBQVEsVUFBUixDQUEzQzs7RUFFQSxHQUFBLEdBQU0sUUFBQSxDQUFBOztFQUNOLEVBQUEsR0FBSyxRQUFBLENBQVMsSUFBVCxFQUFlLE1BQWYsRUFBdUIsS0FBdkI7O0VBQ0wsR0FBRyxDQUFDLEdBQUosQ0FBUSxFQUFSOztFQUNBLEVBQUEsR0FBSyxRQUFBLENBQVMsSUFBVCxFQUFlLE1BQWYsRUFBdUIsS0FBdkI7O0VBQ0wsR0FBRyxDQUFDLEdBQUosQ0FBUSxFQUFSOztFQUVBLEVBQUUsQ0FBQyxDQUFILENBQUssYUFBTDs7QUFDQTtFQUFBLEtBQUEscUNBQUE7O0lBQ0UsRUFBRSxDQUFDLENBQUgsQ0FBSyxDQUFDLENBQUMsUUFBRixDQUFBLENBQUw7RUFERjs7RUFHQSxRQUFBLENBQVMsU0FBVCxFQUFvQixRQUFBLENBQUEsQ0FBQTtJQUNsQixRQUFBLENBQVMsT0FBVCxFQUFrQixRQUFBLENBQUEsQ0FBQTthQUNoQixFQUFBLENBQUcsYUFBSCxFQUFrQixRQUFBLENBQUEsQ0FBQTtBQUNoQixZQUFBO1FBQUEsQ0FBQSxHQUFJLEdBQUcsQ0FBQyxJQUFKLENBQVMsT0FBVCxFQUFrQixJQUFsQixFQUF3QixNQUF4QixFQUFnQyxLQUFoQztRQUNKLEVBQUUsQ0FBQyxDQUFILENBQUssa0JBQUw7UUFDQSxFQUFFLENBQUMsQ0FBSCxDQUFLLENBQUMsQ0FBQyxRQUFGLENBQUEsQ0FBTDtRQUVBLENBQUEsR0FBSSxHQUFHLENBQUMsSUFBSixDQUFTLE9BQVQsRUFBa0IsRUFBbEIsRUFBc0IsTUFBdEIsRUFBOEIsS0FBOUI7UUFDSixFQUFFLENBQUMsQ0FBSCxDQUFLLGdCQUFMO1FBQ0EsRUFBRSxDQUFDLENBQUgsQ0FBSyxDQUFDLENBQUMsUUFBRixDQUFBLENBQUw7UUFFQSxDQUFBLEdBQUksR0FBRyxDQUFDLElBQUosQ0FBUyxPQUFULEVBQWtCLEVBQWxCLEVBQXNCLE1BQXRCLEVBQThCLEVBQTlCO1FBQ0osRUFBRSxDQUFDLENBQUgsQ0FBSyxhQUFMO2VBQ0EsRUFBRSxDQUFDLENBQUgsQ0FBSyxDQUFDLENBQUMsUUFBRixDQUFBLENBQUw7TUFYZ0IsQ0FBbEI7SUFEZ0IsQ0FBbEI7SUFjQSxRQUFBLENBQVMsUUFBVCxFQUFtQixRQUFBLENBQUEsQ0FBQTtNQUNqQixFQUFBLENBQUcsYUFBSCxFQUFrQixRQUFBLENBQUEsQ0FBQTtBQUNoQixZQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUE7UUFBQSxPQUFBLEdBQVUsR0FBRyxDQUFDLEtBQUosQ0FBVSxPQUFWLEVBQW1CLElBQW5CLEVBQXlCLE1BQXpCLEVBQWlDLEtBQWpDO1FBQ1YsRUFBRSxDQUFDLENBQUgsQ0FBSyxrQkFBTDtBQUNBO1FBQUEsS0FBQSxZQUFBO3VCQUNFLEVBQUUsQ0FBQyxDQUFILENBQUssQ0FBQyxDQUFDLFFBQUYsQ0FBQSxDQUFMO1FBREYsQ0FBQTs7TUFIZ0IsQ0FBbEI7YUFLQSxFQUFBLENBQUcsYUFBSCxFQUFrQixRQUFBLENBQUEsQ0FBQTtBQUNoQixZQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUE7UUFBQSxPQUFBLEdBQVUsR0FBRyxDQUFDLEtBQUosQ0FBVSxPQUFWLEVBQW1CLEVBQW5CLEVBQXVCLE1BQXZCLEVBQStCLEVBQS9CO1FBQ1YsRUFBRSxDQUFDLENBQUgsQ0FBSywyQkFBTDtBQUNBO1FBQUEsS0FBQSxZQUFBO3VCQUNFLEVBQUUsQ0FBQyxDQUFILENBQUssQ0FBQyxDQUFDLFFBQUYsQ0FBQSxDQUFMO1FBREYsQ0FBQTs7TUFIZ0IsQ0FBbEI7SUFOaUIsQ0FBbkI7V0FZQSxRQUFBLENBQVMsV0FBVCxFQUFzQixRQUFBLENBQUEsQ0FBQTthQUNwQixFQUFBLENBQUcsYUFBSCxFQUFrQixRQUFBLENBQUEsQ0FBQTtBQUVoQixZQUFBLE9BQUE7O0FBQUE7UUFBQSxLQUFBLFFBQUE7dUJBQ0UsRUFBRSxDQUFDLENBQUgsQ0FBSyxDQUFMO1FBREYsQ0FBQTs7TUFGZ0IsQ0FBbEI7SUFEb0IsQ0FBdEI7RUEzQmtCLENBQXBCO0FBakJBIiwic291cmNlc0NvbnRlbnQiOlsiYXNzZXJ0ID0gcmVxdWlyZSgnY2hhaScpLmFzc2VydFxue3VuaXRfLCBydW50aW1lfSA9IHJlcXVpcmUoJy4vY29tbW9uJylcbiQkID0gdW5pdF8gbW9kdWxlXG57Y29udGV4dF8sIEJlbGlldmUsIGJlbGlldmVffSA9IHJ1bnRpbWVcbntfXywgXyQsIG1vZHVsZV99ID0gcnVudGltZVxue19Cb2IsIF9Kb2UsIF9saWtlcywgX0Zpc2gsIF9QZWFzLCBfZ2V0fSA9IHJlcXVpcmUoJy4vY29tbW9uJylcblxuY3R4ID0gY29udGV4dF8oKVxuYzEgPSBiZWxpZXZlXyBfQm9iLCBfbGlrZXMsIF9GaXNoXG5jdHguYWRkKGMxKVxuYzIgPSBiZWxpZXZlXyBfSm9lLCBfbGlrZXMsIF9QZWFzXG5jdHguYWRkKGMyKVxuXG4kJC4kIFwiQWxsIENsYXVzZXNcIlxuZm9yIGMgaW4gY3R4LmNsYXVzZXNcbiAgJCQuXyBjLnRvU3RyaW5nKClcblxuZGVzY3JpYmUgJ0NvbnRleHQnLCAtPlxuICBkZXNjcmliZSAnQGZpbmQnLCAtPlxuICAgIGl0ICdzaG91bGQgd29yaycsIC0+XG4gICAgICByID0gY3R4LmZpbmQgQmVsaWV2ZSwgX0JvYiwgX2xpa2VzLCBfRmlzaFxuICAgICAgJCQuJCBcIkJvYiwgbGlrZXMsIEZpc2hcIlxuICAgICAgJCQuXyByLnRvU3RyaW5nKClcblxuICAgICAgciA9IGN0eC5maW5kIEJlbGlldmUsIF9fLCBfbGlrZXMsIF9GaXNoXG4gICAgICAkJC4kIFwiXywgbGlrZXMsIEZpc2hcIlxuICAgICAgJCQuXyByLnRvU3RyaW5nKClcblxuICAgICAgciA9IGN0eC5maW5kIEJlbGlldmUsIF9fLCBfbGlrZXMsIF9fXG4gICAgICAkJC4kIFwiXywgbGlrZXMsIF9cIlxuICAgICAgJCQuXyByLnRvU3RyaW5nKClcblxuICBkZXNjcmliZSAnQG1hdGNoJywgLT5cbiAgICBpdCAnc2hvdWxkIHdvcmsnLCAtPlxuICAgICAgbWF0Y2hlcyA9IGN0eC5tYXRjaCBCZWxpZXZlLCBfQm9iLCBfbGlrZXMsIF9GaXNoXG4gICAgICAkJC4kIFwiQm9iLCBsaWtlcywgRmlzaFwiXG4gICAgICBmb3IgciBmcm9tIG1hdGNoZXNcbiAgICAgICAgJCQuXyByLnRvU3RyaW5nKClcbiAgICBpdCAnc2hvdWxkIHdvcmsnLCAtPlxuICAgICAgbWF0Y2hlcyA9IGN0eC5tYXRjaCBCZWxpZXZlLCBfXywgX2xpa2VzLCBfX1xuICAgICAgJCQuJCBcImN0eC5tYXRjaChfXywgX2xpa2VzLCBfXylcIlxuICAgICAgZm9yIHIgZnJvbSBtYXRjaGVzXG4gICAgICAgICQkLl8gci50b1N0cmluZygpXG5cbiAgZGVzY3JpYmUgJ0BpdGVyYXRvcicsIC0+XG4gICAgaXQgJ3Nob3VsZCB3b3JrJywgLT5cbiAgICAgICNjdHguZm9yRWFjaCAoYykgLT4gJCQuXyBjXG4gICAgICBmb3IgYyBmcm9tIGN0eFxuICAgICAgICAkJC5fIGNcbiJdfQ==
