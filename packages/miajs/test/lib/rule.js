(function() {
  var $$, Achieve, Assert, Attempt, Believe, Context, Message, Method, OnAssert, OnAttempt, OnRetract, Policy, Retract, Rule, Runner, Term, Trigger, _, _$, _$self, _Bob, _Fish, _Joe, _Peas, __, _get, _likes, assert, module_, runtime, unit_;

  assert = require('chai').assert;

  ({unit_, runtime} = require('./common'));

  $$ = unit_(module);

  ({Term, Context, Assert, Retract, Believe, Attempt, Achieve} = runtime);

  ({_, __, _$, module_, _$self, Message, Policy, Rule, Trigger, OnAssert, OnRetract, OnAttempt, Runner, Method} = runtime);

  ({_Bob, _Joe, _likes, _Fish, _Peas, _get} = require('./common'));

  describe('Rule', function() {
    return describe('@fire', function() {
      return it('should work', function() {
        var c, c1, c2, ctx, i, len, m, ref, rnr;
        ctx = new Context();
        c1 = new Believe(_Bob, _likes, _Fish);
        ctx.add(c1);
        c2 = new Believe(_Joe, _likes, _Peas);
        ctx.add(c2);
        $$.$("All Clauses");
        ref = ctx.clauses;
        for (i = 0, len = ref.length; i < len; i++) {
          c = ref[i];
          $$._(c.toString());
        }
        m = new Assert(c1);
        $$.$('Begin Task Execution');
        rnr = new Runner();
        rnr.def(new Trigger(Assert, Believe, __, _likes, _Fish), function() {
          var $x;
          $x = this.msg.data.subj;
          return this.task(function() {
            $$._('A');
            return this.perform($x, _get, _Fish);
          }).task(function() {
            return $$._('B');
          });
        });
        rnr.def(new Trigger(Attempt, Achieve, __, _get, _Fish), function() {
          var $x;
          $x = this.msg.data.subj;
          return $$._(_$($x) + ' is getting Fish.');
        });
        rnr.post(m);
        return rnr.run();
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZS5qcyIsInNvdXJjZXMiOlsicnVsZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFBLENBQVEsTUFBUixDQUFlLENBQUM7O0VBQ3pCLENBQUEsQ0FBQyxLQUFELEVBQVEsT0FBUixDQUFBLEdBQW1CLE9BQUEsQ0FBUSxVQUFSLENBQW5COztFQUNBLEVBQUEsR0FBSyxLQUFBLENBQU0sTUFBTjs7RUFDTCxDQUFBLENBQUMsSUFBRCxFQUFPLE9BQVAsRUFBZ0IsTUFBaEIsRUFBd0IsT0FBeEIsRUFBaUMsT0FBakMsRUFBMEMsT0FBMUMsRUFBbUQsT0FBbkQsQ0FBQSxHQUE4RCxPQUE5RDs7RUFDQSxDQUFBLENBQUMsQ0FBRCxFQUFJLEVBQUosRUFBUSxFQUFSLEVBQVksT0FBWixFQUFxQixNQUFyQixFQUE2QixPQUE3QixFQUFzQyxNQUF0QyxFQUE4QyxJQUE5QyxFQUFvRCxPQUFwRCxFQUE2RCxRQUE3RCxFQUF1RSxTQUF2RSxFQUFrRixTQUFsRixFQUE2RixNQUE3RixFQUFxRyxNQUFyRyxDQUFBLEdBQStHLE9BQS9HOztFQUNBLENBQUEsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLE1BQWIsRUFBcUIsS0FBckIsRUFBNEIsS0FBNUIsRUFBbUMsSUFBbkMsQ0FBQSxHQUEyQyxPQUFBLENBQVEsVUFBUixDQUEzQzs7RUFFQSxRQUFBLENBQVMsTUFBVCxFQUFpQixRQUFBLENBQUEsQ0FBQTtXQUNmLFFBQUEsQ0FBUyxPQUFULEVBQWtCLFFBQUEsQ0FBQSxDQUFBO2FBQ2hCLEVBQUEsQ0FBRyxhQUFILEVBQWtCLFFBQUEsQ0FBQSxDQUFBO0FBQ2hCLFlBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtRQUFBLEdBQUEsR0FBTSxJQUFJLE9BQUosQ0FBQTtRQUNOLEVBQUEsR0FBSyxJQUFJLE9BQUosQ0FBWSxJQUFaLEVBQWtCLE1BQWxCLEVBQTBCLEtBQTFCO1FBQ0wsR0FBRyxDQUFDLEdBQUosQ0FBUSxFQUFSO1FBQ0EsRUFBQSxHQUFLLElBQUksT0FBSixDQUFZLElBQVosRUFBa0IsTUFBbEIsRUFBMEIsS0FBMUI7UUFDTCxHQUFHLENBQUMsR0FBSixDQUFRLEVBQVI7UUFFQSxFQUFFLENBQUMsQ0FBSCxDQUFLLGFBQUw7QUFDQTtRQUFBLEtBQUEscUNBQUE7O1VBQ0UsRUFBRSxDQUFDLENBQUgsQ0FBSyxDQUFDLENBQUMsUUFBRixDQUFBLENBQUw7UUFERjtRQUdBLENBQUEsR0FBSSxJQUFJLE1BQUosQ0FBVyxFQUFYO1FBRUosRUFBRSxDQUFDLENBQUgsQ0FBSyxzQkFBTDtRQUNBLEdBQUEsR0FBTSxJQUFJLE1BQUosQ0FBQTtRQUVOLEdBQUcsQ0FBQyxHQUFKLENBQVEsSUFBSSxPQUFKLENBQVksTUFBWixFQUFvQixPQUFwQixFQUE2QixFQUE3QixFQUFpQyxNQUFqQyxFQUF5QyxLQUF6QyxDQUFSLEVBQXlELFFBQUEsQ0FBQSxDQUFBO0FBQ3ZELGNBQUE7VUFBQSxFQUFBLEdBQUssSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUM7aUJBQ2YsSUFBQyxDQUFBLElBQUQsQ0FBTSxRQUFBLENBQUEsQ0FBQTtZQUNKLEVBQUUsQ0FBQyxDQUFILENBQUssR0FBTDttQkFDQSxJQUFDLENBQUEsT0FBRCxDQUFTLEVBQVQsRUFBYSxJQUFiLEVBQW1CLEtBQW5CO1VBRkksQ0FBTixDQUdBLENBQUMsSUFIRCxDQUdNLFFBQUEsQ0FBQSxDQUFBO21CQUNKLEVBQUUsQ0FBQyxDQUFILENBQUssR0FBTDtVQURJLENBSE47UUFGdUQsQ0FBekQ7UUFRQSxHQUFHLENBQUMsR0FBSixDQUFRLElBQUksT0FBSixDQUFZLE9BQVosRUFBcUIsT0FBckIsRUFBOEIsRUFBOUIsRUFBa0MsSUFBbEMsRUFBd0MsS0FBeEMsQ0FBUixFQUF5RCxRQUFBLENBQUEsQ0FBQTtBQUN2RCxjQUFBO1VBQUEsRUFBQSxHQUFLLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBSSxDQUFDO2lCQUNmLEVBQUUsQ0FBQyxDQUFILENBQUssRUFBQSxDQUFHLEVBQUgsQ0FBQSxHQUFTLG1CQUFkO1FBRnVELENBQXpEO1FBSUEsR0FBRyxDQUFDLElBQUosQ0FBUyxDQUFUO2VBQ0EsR0FBRyxDQUFDLEdBQUosQ0FBQTtNQTdCZ0IsQ0FBbEI7SUFEZ0IsQ0FBbEI7RUFEZSxDQUFqQjtBQVBBIiwic291cmNlc0NvbnRlbnQiOlsiYXNzZXJ0ID0gcmVxdWlyZSgnY2hhaScpLmFzc2VydFxue3VuaXRfLCBydW50aW1lfSA9IHJlcXVpcmUoJy4vY29tbW9uJylcbiQkID0gdW5pdF8gbW9kdWxlXG57VGVybSwgQ29udGV4dCwgQXNzZXJ0LCBSZXRyYWN0LCBCZWxpZXZlLCBBdHRlbXB0LCBBY2hpZXZlfSA9IHJ1bnRpbWVcbntfLCBfXywgXyQsIG1vZHVsZV8sIF8kc2VsZiwgTWVzc2FnZSwgUG9saWN5LCBSdWxlLCBUcmlnZ2VyLCBPbkFzc2VydCwgT25SZXRyYWN0LCBPbkF0dGVtcHQsIFJ1bm5lciwgTWV0aG9kfSA9IHJ1bnRpbWVcbntfQm9iLCBfSm9lLCBfbGlrZXMsIF9GaXNoLCBfUGVhcywgX2dldH0gPSByZXF1aXJlKCcuL2NvbW1vbicpXG5cbmRlc2NyaWJlICdSdWxlJywgLT5cbiAgZGVzY3JpYmUgJ0BmaXJlJywgLT5cbiAgICBpdCAnc2hvdWxkIHdvcmsnLCAtPlxuICAgICAgY3R4ID0gbmV3IENvbnRleHQoKVxuICAgICAgYzEgPSBuZXcgQmVsaWV2ZShfQm9iLCBfbGlrZXMsIF9GaXNoKVxuICAgICAgY3R4LmFkZChjMSlcbiAgICAgIGMyID0gbmV3IEJlbGlldmUoX0pvZSwgX2xpa2VzLCBfUGVhcylcbiAgICAgIGN0eC5hZGQoYzIpXG5cbiAgICAgICQkLiQgXCJBbGwgQ2xhdXNlc1wiXG4gICAgICBmb3IgYyBpbiBjdHguY2xhdXNlc1xuICAgICAgICAkJC5fIGMudG9TdHJpbmcoKVxuXG4gICAgICBtID0gbmV3IEFzc2VydChjMSlcblxuICAgICAgJCQuJCAnQmVnaW4gVGFzayBFeGVjdXRpb24nXG4gICAgICBybnIgPSBuZXcgUnVubmVyKClcblxuICAgICAgcm5yLmRlZiBuZXcgVHJpZ2dlcihBc3NlcnQsIEJlbGlldmUsIF9fLCBfbGlrZXMsIF9GaXNoKSwgLT5cbiAgICAgICAgJHggPSBAbXNnLmRhdGEuc3VialxuICAgICAgICBAdGFzayAtPlxuICAgICAgICAgICQkLl8gJ0EnXG4gICAgICAgICAgQHBlcmZvcm0oJHgsIF9nZXQsIF9GaXNoKVxuICAgICAgICAudGFzayAtPlxuICAgICAgICAgICQkLl8gJ0InXG5cbiAgICAgIHJuci5kZWYgbmV3IFRyaWdnZXIoQXR0ZW1wdCwgQWNoaWV2ZSwgX18sIF9nZXQsIF9GaXNoKSwgIC0+XG4gICAgICAgICR4ID0gQG1zZy5kYXRhLnN1YmpcbiAgICAgICAgJCQuXyBfJCgkeCkgKyAnIGlzIGdldHRpbmcgRmlzaC4nXG5cbiAgICAgIHJuci5wb3N0KG0pXG4gICAgICBybnIucnVuKClcbiJdfQ==
