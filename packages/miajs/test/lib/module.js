(function() {
  var $$, Achieve, Assert, Attempt, Believe, Context, Message, Method, OnAssert, OnAttempt, OnRetract, Policy, Retract, Rule, Runner, Term, Trigger, _$, _Bob, _Fish, _Joe, _Peas, __, _get, _impasse, _likes, assert, believe_, context_, module_, runner_, runtime, unit_;

  assert = require('chai').assert;

  ({unit_, runtime} = require('./common'));

  $$ = unit_(module);

  ({Term, Context, context_, Assert, Retract, Believe, believe_, Attempt, Achieve} = runtime);

  ({__, _impasse, _$, runner_, module_, Message, Policy, Rule, Trigger, OnAssert, OnRetract, OnAttempt, Runner, Method} = runtime);

  ({_Bob, _Joe, _likes, _Fish, _Peas, _get} = require('./common'));

  describe('Module', function() {
    return describe('@action', function() {
      return it('should work', function() {
        var c, c1, c2, ctx, exports, i, len, m, ref;
        ctx = context_();
        c1 = believe_(_Bob, _likes, _Fish);
        ctx.add(c1);
        c2 = believe_(_Joe, _likes, _Peas);
        ctx.add(c2);
        $$.$("All Clauses");
        ref = ctx.clauses;
        for (i = 0, len = ref.length; i < len; i++) {
          c = ref[i];
          $$._(c.toString());
        }
        m = new Assert(c1);
        $$.$('Begin Task Execution');
        exports = module_(function() {
          this.def(new Trigger(Assert, Believe, __, _likes, _Fish), function() {
            var self;
            self = this;
            return this.task(function() {
              $$._('Task Fire 1:');
              return this.perform(self.msg.data.subj, _get, _Fish);
            }).task(function() {
              return $$._('Task Fire 2:');
            });
          });
          this.def(new Trigger(Attempt, Achieve, __, _get, _Fish), function() {
            var self;
            self = this;
            return this.task(function() {
              return $$._(_$(self.msg.data.subj) + ' is getting Fish.');
            });
          });
          this.defg(new Trigger(Attempt, Achieve, null, _impasse, null), function() {
            //$$._ String(@rnr.ctx)
            return $$._('Impassed');
          });
          return this.post(m);
        });
        return runner_().run(exports);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlcyI6WyJtb2R1bGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFBLENBQVEsTUFBUixDQUFlLENBQUM7O0VBQ3pCLENBQUEsQ0FBQyxLQUFELEVBQVEsT0FBUixDQUFBLEdBQW1CLE9BQUEsQ0FBUSxVQUFSLENBQW5COztFQUNBLEVBQUEsR0FBSyxLQUFBLENBQU0sTUFBTjs7RUFDTCxDQUFBLENBQUMsSUFBRCxFQUFPLE9BQVAsRUFBZ0IsUUFBaEIsRUFBMEIsTUFBMUIsRUFBa0MsT0FBbEMsRUFBMkMsT0FBM0MsRUFBb0QsUUFBcEQsRUFBOEQsT0FBOUQsRUFBdUUsT0FBdkUsQ0FBQSxHQUFrRixPQUFsRjs7RUFDQSxDQUFBLENBQUMsRUFBRCxFQUFLLFFBQUwsRUFBZSxFQUFmLEVBQW1CLE9BQW5CLEVBQTRCLE9BQTVCLEVBQXFDLE9BQXJDLEVBQThDLE1BQTlDLEVBQXNELElBQXRELEVBQTRELE9BQTVELEVBQXFFLFFBQXJFLEVBQStFLFNBQS9FLEVBQTBGLFNBQTFGLEVBQXFHLE1BQXJHLEVBQTZHLE1BQTdHLENBQUEsR0FBdUgsT0FBdkg7O0VBQ0EsQ0FBQSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsTUFBYixFQUFxQixLQUFyQixFQUE0QixLQUE1QixFQUFtQyxJQUFuQyxDQUFBLEdBQTJDLE9BQUEsQ0FBUSxVQUFSLENBQTNDOztFQUVBLFFBQUEsQ0FBUyxRQUFULEVBQW1CLFFBQUEsQ0FBQSxDQUFBO1dBQ2pCLFFBQUEsQ0FBUyxTQUFULEVBQW9CLFFBQUEsQ0FBQSxDQUFBO2FBQ2xCLEVBQUEsQ0FBRyxhQUFILEVBQWtCLFFBQUEsQ0FBQSxDQUFBO0FBQ2hCLFlBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQTtRQUFBLEdBQUEsR0FBTSxRQUFBLENBQUE7UUFDTixFQUFBLEdBQUssUUFBQSxDQUFTLElBQVQsRUFBZSxNQUFmLEVBQXVCLEtBQXZCO1FBQ0wsR0FBRyxDQUFDLEdBQUosQ0FBUSxFQUFSO1FBQ0EsRUFBQSxHQUFLLFFBQUEsQ0FBUyxJQUFULEVBQWUsTUFBZixFQUF1QixLQUF2QjtRQUNMLEdBQUcsQ0FBQyxHQUFKLENBQVEsRUFBUjtRQUVBLEVBQUUsQ0FBQyxDQUFILENBQUssYUFBTDtBQUNBO1FBQUEsS0FBQSxxQ0FBQTs7VUFDRSxFQUFFLENBQUMsQ0FBSCxDQUFLLENBQUMsQ0FBQyxRQUFGLENBQUEsQ0FBTDtRQURGO1FBR0EsQ0FBQSxHQUFJLElBQUksTUFBSixDQUFXLEVBQVg7UUFFSixFQUFFLENBQUMsQ0FBSCxDQUFLLHNCQUFMO1FBQ0EsT0FBQSxHQUFVLE9BQUEsQ0FBUSxRQUFBLENBQUEsQ0FBQTtVQUVoQixJQUFDLENBQUEsR0FBRCxDQUFLLElBQUksT0FBSixDQUFZLE1BQVosRUFBb0IsT0FBcEIsRUFBNkIsRUFBN0IsRUFBaUMsTUFBakMsRUFBeUMsS0FBekMsQ0FBTCxFQUFzRCxRQUFBLENBQUEsQ0FBQTtBQUNwRCxnQkFBQTtZQUFBLElBQUEsR0FBTzttQkFDUCxJQUFDLENBQUEsSUFBRCxDQUFNLFFBQUEsQ0FBQSxDQUFBO2NBQ0osRUFBRSxDQUFDLENBQUgsQ0FBSyxjQUFMO3FCQUNBLElBQUMsQ0FBQSxPQUFELENBQVMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBdkIsRUFBNkIsSUFBN0IsRUFBbUMsS0FBbkM7WUFGSSxDQUFOLENBR0EsQ0FBQyxJQUhELENBR00sUUFBQSxDQUFBLENBQUE7cUJBQ0osRUFBRSxDQUFDLENBQUgsQ0FBSyxjQUFMO1lBREksQ0FITjtVQUZvRCxDQUF0RDtVQVFBLElBQUMsQ0FBQSxHQUFELENBQUssSUFBSSxPQUFKLENBQVksT0FBWixFQUFxQixPQUFyQixFQUE4QixFQUE5QixFQUFrQyxJQUFsQyxFQUF3QyxLQUF4QyxDQUFMLEVBQXFELFFBQUEsQ0FBQSxDQUFBO0FBQ25ELGdCQUFBO1lBQUEsSUFBQSxHQUFPO21CQUNQLElBQUMsQ0FBQSxJQUFELENBQU0sUUFBQSxDQUFBLENBQUE7cUJBQ0osRUFBRSxDQUFDLENBQUgsQ0FBSyxFQUFBLENBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBakIsQ0FBQSxHQUF5QixtQkFBOUI7WUFESSxDQUFOO1VBRm1ELENBQXJEO1VBS0EsSUFBQyxDQUFBLElBQUQsQ0FBTSxJQUFJLE9BQUosQ0FBWSxPQUFaLEVBQXFCLE9BQXJCLEVBQThCLElBQTlCLEVBQW9DLFFBQXBDLEVBQThDLElBQTlDLENBQU4sRUFBMkQsUUFBQSxDQUFBLENBQUEsRUFBQTs7bUJBRXpELEVBQUUsQ0FBQyxDQUFILENBQUssVUFBTDtVQUZ5RCxDQUEzRDtpQkFJQSxJQUFDLENBQUEsSUFBRCxDQUFNLENBQU47UUFuQmdCLENBQVI7ZUFzQlYsT0FBQSxDQUFBLENBQVMsQ0FBQyxHQUFWLENBQWMsT0FBZDtNQXBDZ0IsQ0FBbEI7SUFEa0IsQ0FBcEI7RUFEaUIsQ0FBbkI7QUFQQSIsInNvdXJjZXNDb250ZW50IjpbImFzc2VydCA9IHJlcXVpcmUoJ2NoYWknKS5hc3NlcnRcbnt1bml0XywgcnVudGltZX0gPSByZXF1aXJlKCcuL2NvbW1vbicpXG4kJCA9IHVuaXRfIG1vZHVsZVxue1Rlcm0sIENvbnRleHQsIGNvbnRleHRfLCBBc3NlcnQsIFJldHJhY3QsIEJlbGlldmUsIGJlbGlldmVfLCBBdHRlbXB0LCBBY2hpZXZlfSA9IHJ1bnRpbWVcbntfXywgX2ltcGFzc2UsIF8kLCBydW5uZXJfLCBtb2R1bGVfLCBNZXNzYWdlLCBQb2xpY3ksIFJ1bGUsIFRyaWdnZXIsIE9uQXNzZXJ0LCBPblJldHJhY3QsIE9uQXR0ZW1wdCwgUnVubmVyLCBNZXRob2R9ID0gcnVudGltZVxue19Cb2IsIF9Kb2UsIF9saWtlcywgX0Zpc2gsIF9QZWFzLCBfZ2V0fSA9IHJlcXVpcmUoJy4vY29tbW9uJylcblxuZGVzY3JpYmUgJ01vZHVsZScsIC0+XG4gIGRlc2NyaWJlICdAYWN0aW9uJywgLT5cbiAgICBpdCAnc2hvdWxkIHdvcmsnLCAtPlxuICAgICAgY3R4ID0gY29udGV4dF8oKVxuICAgICAgYzEgPSBiZWxpZXZlXyBfQm9iLCBfbGlrZXMsIF9GaXNoXG4gICAgICBjdHguYWRkIGMxXG4gICAgICBjMiA9IGJlbGlldmVfIF9Kb2UsIF9saWtlcywgX1BlYXNcbiAgICAgIGN0eC5hZGQgYzJcblxuICAgICAgJCQuJCBcIkFsbCBDbGF1c2VzXCJcbiAgICAgIGZvciBjIGluIGN0eC5jbGF1c2VzXG4gICAgICAgICQkLl8gYy50b1N0cmluZygpXG5cbiAgICAgIG0gPSBuZXcgQXNzZXJ0KGMxKVxuXG4gICAgICAkJC4kICdCZWdpbiBUYXNrIEV4ZWN1dGlvbidcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGVfIC0+XG5cbiAgICAgICAgQGRlZiBuZXcgVHJpZ2dlcihBc3NlcnQsIEJlbGlldmUsIF9fLCBfbGlrZXMsIF9GaXNoKSwgLT5cbiAgICAgICAgICBzZWxmID0gdGhpc1xuICAgICAgICAgIEB0YXNrIC0+XG4gICAgICAgICAgICAkJC5fKCdUYXNrIEZpcmUgMTonKVxuICAgICAgICAgICAgQHBlcmZvcm0oc2VsZi5tc2cuZGF0YS5zdWJqLCBfZ2V0LCBfRmlzaClcbiAgICAgICAgICAudGFzayAtPlxuICAgICAgICAgICAgJCQuXygnVGFzayBGaXJlIDI6JylcblxuICAgICAgICBAZGVmIG5ldyBUcmlnZ2VyKEF0dGVtcHQsIEFjaGlldmUsIF9fLCBfZ2V0LCBfRmlzaCksIC0+XG4gICAgICAgICAgc2VsZiA9IHRoaXNcbiAgICAgICAgICBAdGFzayAtPlxuICAgICAgICAgICAgJCQuXyBfJChzZWxmLm1zZy5kYXRhLnN1YmopICsgJyBpcyBnZXR0aW5nIEZpc2guJ1xuXG4gICAgICAgIEBkZWZnIG5ldyBUcmlnZ2VyKEF0dGVtcHQsIEFjaGlldmUsIG51bGwsIF9pbXBhc3NlLCBudWxsKSwgLT5cbiAgICAgICAgICAjJCQuXyBTdHJpbmcoQHJuci5jdHgpXG4gICAgICAgICAgJCQuXyAnSW1wYXNzZWQnXG5cbiAgICAgICAgQHBvc3QobSlcblxuXG4gICAgICBydW5uZXJfKCkucnVuKGV4cG9ydHMpXG4iXX0=
