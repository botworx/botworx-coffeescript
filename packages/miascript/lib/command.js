(function() {
  var compile, fs, path, run, stream;

  fs = require('fs');

  stream = require('stream');

  path = require('path');

  ({compile} = require('./index'));

  run = function() {
    var ext, fileName;
    fileName = process.argv[2];
    ext = path.extname(fileName);
    if (ext === '') {
      fileName += '.mia';
    }
    console.log("Compiling " + fileName);
    return fs.readFile(fileName, 'utf8', function(err, data) {
      var code, out, outFileName;
      if (err) {
        console.log("ERROR: ", err);
        return false;
      }
      
      code = compile(data, {
        filename: fileName
      });
      
      outFileName = fileName.substr(0, fileName.lastIndexOf(".")) + ".js";
      out = fs.createWriteStream(outFileName);
      out.write(code);
      return out.end();
    });
  };

  exports.run = run;

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5qcyIsInNvdXJjZXMiOlsiY29tbWFuZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLE9BQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQTs7RUFBQSxFQUFBLEdBQUssT0FBQSxDQUFRLElBQVI7O0VBQ0wsTUFBQSxHQUFTLE9BQUEsQ0FBUSxRQUFSOztFQUNULElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7RUFDUCxDQUFBLENBQUMsT0FBRCxDQUFBLEdBQVksT0FBQSxDQUFRLFNBQVIsQ0FBWjs7RUFDQSxHQUFBLEdBQU0sUUFBQSxDQUFBLENBQUE7QUFDSixRQUFBLEdBQUEsRUFBQTtJQUFBLFFBQUEsR0FBVyxPQUFPLENBQUMsSUFBSyxDQUFBLENBQUE7SUFDeEIsR0FBQSxHQUFNLElBQUksQ0FBQyxPQUFMLENBQWEsUUFBYjtJQUNOLElBQUcsR0FBQSxLQUFPLEVBQVY7TUFDRSxRQUFBLElBQVksT0FEZDs7SUFHQSxPQUFPLENBQUMsR0FBUixDQUFZLFlBQUEsR0FBZSxRQUEzQjtXQUVBLEVBQUUsQ0FBQyxRQUFILENBQVksUUFBWixFQUFzQixNQUF0QixFQUE4QixRQUFBLENBQUMsR0FBRCxFQUFNLElBQU4sQ0FBQTtBQUM1QixVQUFBLElBQUEsRUFBQSxHQUFBLEVBQUE7TUFBQSxJQUFJLEdBQUo7UUFDRSxPQUFPLENBQUMsR0FBUixDQUFZLFNBQVosRUFBdUIsR0FBdkI7QUFDQSxlQUFPLE1BRlQ7OztNQUlBLElBQUEsR0FBTyxPQUFBLENBQVEsSUFBUixFQUFjO1FBQUMsUUFBQSxFQUFVO01BQVgsQ0FBZDs7TUFFUCxXQUFBLEdBQWMsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsQ0FBaEIsRUFBbUIsUUFBUSxDQUFDLFdBQVQsQ0FBcUIsR0FBckIsQ0FBbkIsQ0FBQSxHQUFnRDtNQUM5RCxHQUFBLEdBQU0sRUFBRSxDQUFDLGlCQUFILENBQXFCLFdBQXJCO01BQ04sR0FBRyxDQUFDLEtBQUosQ0FBVSxJQUFWO2FBQ0EsR0FBRyxDQUFDLEdBQUosQ0FBQTtJQVY0QixDQUE5QjtFQVJJOztFQW9CTixPQUFPLENBQUMsR0FBUixHQUFjO0FBeEJkIiwic291cmNlc0NvbnRlbnQiOlsiZnMgPSByZXF1aXJlKCdmcycpXG5zdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxucGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxue2NvbXBpbGV9ID0gcmVxdWlyZSAnLi9pbmRleCdcbnJ1biA9IC0+XG4gIGZpbGVOYW1lID0gcHJvY2Vzcy5hcmd2WzJdXG4gIGV4dCA9IHBhdGguZXh0bmFtZSBmaWxlTmFtZVxuICBpZiBleHQgPT0gJydcbiAgICBmaWxlTmFtZSArPSAnLm1pYSdcblxuICBjb25zb2xlLmxvZyhcIkNvbXBpbGluZyBcIiArIGZpbGVOYW1lKVxuXG4gIGZzLnJlYWRGaWxlIGZpbGVOYW1lLCAndXRmOCcsIChlcnIsIGRhdGEpIC0+XG4gICAgaWYgKGVycilcbiAgICAgIGNvbnNvbGUubG9nKFwiRVJST1I6IFwiLCBlcnIpXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICAjXG4gICAgY29kZSA9IGNvbXBpbGUgZGF0YSwge2ZpbGVuYW1lOiBmaWxlTmFtZX1cbiAgICAjXG4gICAgb3V0RmlsZU5hbWUgPSBmaWxlTmFtZS5zdWJzdHIoMCwgZmlsZU5hbWUubGFzdEluZGV4T2YoXCIuXCIpKSArIFwiLmpzXCJcbiAgICBvdXQgPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShvdXRGaWxlTmFtZSlcbiAgICBvdXQud3JpdGUgY29kZVxuICAgIG91dC5lbmQoKVxuXG5leHBvcnRzLnJ1biA9IHJ1blxuIl19
