(function() {
  var Assert, AstVisitor, Attempt, Block, CallStmt, Clause, Transformer, _Achieve, _exists, _null;

  ({AstVisitor} = require('./astvisitor'));

  ({_null, _exists, _Achieve, Block, CallStmt, Attempt, Assert, Clause} = require('./yy'));

  Transformer = class Transformer extends AstVisitor {
    constructor() {
      super();
      this.delegator_({
        Term: this.visitTerm,
        Clause: this.visitClause,
        Sentence: this.visitSentence,
        Paragraph: this.visitParagraph
      });
    }

    transform(ast, options) {
      this.visit(ast);
      return ast;
    }

    visitNode(node) {
      var child, i, index, j, len, len1, ref;
      if (!node) {
        return;
      }
      if (Array.isArray(node)) {
        for (index = i = 0, len = node.length; i < len; index = ++i) {
          child = node[index];
          node[index] = this.visit(child);
        }
        return node;
      }
      if (!node._TNode) {
        throw new Error(`Does not implement TNode:  ${JSON.stringify(node)}`);
      }
      ref = node.nodes;
      for (index = j = 0, len1 = ref.length; j < len1; index = ++j) {
        child = ref[index];
        node.nodes[index] = this.visit(child);
      }
      return node;
    }

    visitTerm(node) {
      if (this.top(-1) instanceof Block) {
        return new Assert(new Clause(node, _exists, _null));
      }
      return node;
    }

    visitClause(node) {
      var parent;
      parent = this.top(-1);
      if (parent instanceof Block) {
        if (node.subj === _null) {
          node.type = _Achieve;
          return new Attempt(node);
        } else {
          return new Assert(node);
        }
      } else {
        if (node.subj === _null && this.subj) {
          node.subj = this.subj;
        }
      }
      return node;
    }

    visitSentence(node) {
      var clause, i, len, obj, ref, result, subj, verb;
      clause = node.clause;
      ({subj, verb} = clause);
      result = [this.visitClause(clause)];
      ref = node.list;
      for (i = 0, len = ref.length; i < len; i++) {
        obj = ref[i];
        result.push(this.visitClause(new Clause(subj, verb, obj)));
      }
      return result;
    }

    visitParagraph(node) {
      var clause, i, len, list, ref, result, subclause;
      ({subj: this.subj, list} = node);
      this.visitNode(node);
      result = [this.visitTerm(this.subj)];
      ref = node.list;
      for (i = 0, len = ref.length; i < len; i++) {
        clause = ref[i];
        subclause = this.visitClause(clause);
        if (Array.isArray(subclause)) {
          result = result.concat(subclause);
        } else {
          result.push(subclause);
        }
      }
      return result;
    }

  };

  exports.Transformer = Transformer;

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzIjpbInRyYW5zZm9ybWVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsTUFBQSxFQUFBLFVBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUEsV0FBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUE7O0VBQUEsQ0FBQSxDQUFDLFVBQUQsQ0FBQSxHQUFlLE9BQUEsQ0FBUSxjQUFSLENBQWY7O0VBQ0EsQ0FBQSxDQUFDLEtBQUQsRUFBUSxPQUFSLEVBQWlCLFFBQWpCLEVBQTJCLEtBQTNCLEVBQWtDLFFBQWxDLEVBQTRDLE9BQTVDLEVBQXFELE1BQXJELEVBQTZELE1BQTdELENBQUEsR0FBdUUsT0FBQSxDQUFRLE1BQVIsQ0FBdkU7O0VBRU0sY0FBTixNQUFBLFlBQUEsUUFBMEIsV0FBMUI7SUFDRSxXQUFhLENBQUEsQ0FBQTtXQUNYLENBQUE7TUFDQSxJQUFDLENBQUEsVUFBRCxDQUNFO1FBQUEsSUFBQSxFQUFNLElBQUMsQ0FBQSxTQUFQO1FBQ0EsTUFBQSxFQUFRLElBQUMsQ0FBQSxXQURUO1FBRUEsUUFBQSxFQUFVLElBQUMsQ0FBQSxhQUZYO1FBR0EsU0FBQSxFQUFXLElBQUMsQ0FBQTtNQUhaLENBREY7SUFGVzs7SUFRYixTQUFXLENBQUMsR0FBRCxFQUFNLE9BQU4sQ0FBQTtNQUNULElBQUMsQ0FBQSxLQUFELENBQU8sR0FBUDtBQUNBLGFBQU87SUFGRTs7SUFJWCxTQUFXLENBQUMsSUFBRCxDQUFBO0FBQ1QsVUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQTtNQUFBLElBQUcsQ0FBQyxJQUFKO0FBQWMsZUFBZDs7TUFDQSxJQUFHLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBZCxDQUFIO1FBQ0UsS0FBQSxzREFBQTs7VUFDRSxJQUFLLENBQUEsS0FBQSxDQUFMLEdBQWMsSUFBQyxDQUFBLEtBQUQsQ0FBTyxLQUFQO1FBRGhCO0FBRUEsZUFBTyxLQUhUOztNQUlBLElBQUcsQ0FBQyxJQUFJLENBQUMsTUFBVDtRQUNFLE1BQU0sSUFBSSxLQUFKLENBQVUsQ0FBQSwyQkFBQSxDQUFBLENBQThCLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixDQUE5QixDQUFBLENBQVYsRUFEUjs7QUFFQTtNQUFBLEtBQUEsdURBQUE7O1FBQ0UsSUFBSSxDQUFDLEtBQU0sQ0FBQSxLQUFBLENBQVgsR0FBb0IsSUFBQyxDQUFBLEtBQUQsQ0FBTyxLQUFQO01BRHRCO0FBRUEsYUFBTztJQVZFOztJQVlYLFNBQVcsQ0FBQyxJQUFELENBQUE7TUFDVCxJQUFHLElBQUMsQ0FBQSxHQUFELENBQUssQ0FBQyxDQUFOLENBQUEsWUFBb0IsS0FBdkI7QUFDRSxlQUFPLElBQUksTUFBSixDQUFXLElBQUksTUFBSixDQUFXLElBQVgsRUFBaUIsT0FBakIsRUFBMEIsS0FBMUIsQ0FBWCxFQURUOztBQUVBLGFBQU87SUFIRTs7SUFLWCxXQUFhLENBQUMsSUFBRCxDQUFBO0FBQ1gsVUFBQTtNQUFBLE1BQUEsR0FBUyxJQUFDLENBQUEsR0FBRCxDQUFLLENBQUMsQ0FBTjtNQUNULElBQUcsTUFBQSxZQUFrQixLQUFyQjtRQUNFLElBQUcsSUFBSSxDQUFDLElBQUwsS0FBYSxLQUFoQjtVQUNFLElBQUksQ0FBQyxJQUFMLEdBQVk7QUFDWixpQkFBTyxJQUFJLE9BQUosQ0FBWSxJQUFaLEVBRlQ7U0FBQSxNQUFBO0FBSUUsaUJBQU8sSUFBSSxNQUFKLENBQVcsSUFBWCxFQUpUO1NBREY7T0FBQSxNQUFBO1FBT0UsSUFBRyxJQUFJLENBQUMsSUFBTCxLQUFhLEtBQWIsSUFBc0IsSUFBQyxDQUFBLElBQTFCO1VBQ0UsSUFBSSxDQUFDLElBQUwsR0FBWSxJQUFDLENBQUEsS0FEZjtTQVBGOztBQVNBLGFBQU87SUFYSTs7SUFhYixhQUFlLENBQUMsSUFBRCxDQUFBO0FBQ2IsVUFBQSxNQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUE7TUFBQSxNQUFBLEdBQVMsSUFBSSxDQUFDO01BQ2QsQ0FBQSxDQUFDLElBQUQsRUFBTyxJQUFQLENBQUEsR0FBZSxNQUFmO01BQ0EsTUFBQSxHQUFTLENBQUMsSUFBQyxDQUFBLFdBQUQsQ0FBYSxNQUFiLENBQUQ7QUFDVDtNQUFBLEtBQUEscUNBQUE7O1FBQ0UsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFDLENBQUEsV0FBRCxDQUFhLElBQUksTUFBSixDQUFXLElBQVgsRUFBaUIsSUFBakIsRUFBdUIsR0FBdkIsQ0FBYixDQUFaO01BREY7QUFFQSxhQUFPO0lBTk07O0lBUWYsY0FBZ0IsQ0FBQyxJQUFELENBQUE7QUFDZCxVQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBO01BQUEsQ0FBQSxDQUFFLE1BQUQsSUFBQyxDQUFBLElBQUYsRUFBUSxJQUFSLENBQUEsR0FBZ0IsSUFBaEI7TUFDQSxJQUFDLENBQUEsU0FBRCxDQUFXLElBQVg7TUFDQSxNQUFBLEdBQVMsQ0FBQyxJQUFDLENBQUEsU0FBRCxDQUFXLElBQUMsQ0FBQSxJQUFaLENBQUQ7QUFDVDtNQUFBLEtBQUEscUNBQUE7O1FBQ0UsU0FBQSxHQUFZLElBQUMsQ0FBQSxXQUFELENBQWEsTUFBYjtRQUNaLElBQUcsS0FBSyxDQUFDLE9BQU4sQ0FBYyxTQUFkLENBQUg7VUFDRSxNQUFBLEdBQVMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxTQUFkLEVBRFg7U0FBQSxNQUFBO1VBR0UsTUFBTSxDQUFDLElBQVAsQ0FBWSxTQUFaLEVBSEY7O01BRkY7QUFNQSxhQUFPO0lBVk87O0VBbkRsQjs7RUErREEsT0FBTyxDQUFDLFdBQVIsR0FBc0I7QUFsRXRCIiwic291cmNlc0NvbnRlbnQiOlsie0FzdFZpc2l0b3J9ID0gcmVxdWlyZSAnLi9hc3R2aXNpdG9yJ1xue19udWxsLCBfZXhpc3RzLCBfQWNoaWV2ZSwgQmxvY2ssIENhbGxTdG10LCBBdHRlbXB0LCBBc3NlcnQsIENsYXVzZX0gPSByZXF1aXJlICcuL3l5J1xuXG5jbGFzcyBUcmFuc2Zvcm1lciBleHRlbmRzIEFzdFZpc2l0b3JcbiAgY29uc3RydWN0b3I6IC0+XG4gICAgc3VwZXIoKVxuICAgIEBkZWxlZ2F0b3JfXG4gICAgICBUZXJtOiBAdmlzaXRUZXJtXG4gICAgICBDbGF1c2U6IEB2aXNpdENsYXVzZVxuICAgICAgU2VudGVuY2U6IEB2aXNpdFNlbnRlbmNlXG4gICAgICBQYXJhZ3JhcGg6IEB2aXNpdFBhcmFncmFwaFxuXG4gIHRyYW5zZm9ybTogKGFzdCwgb3B0aW9ucykgLT5cbiAgICBAdmlzaXQoYXN0KVxuICAgIHJldHVybiBhc3RcblxuICB2aXNpdE5vZGU6IChub2RlKSAtPlxuICAgIGlmICFub2RlIHRoZW4gcmV0dXJuXG4gICAgaWYgQXJyYXkuaXNBcnJheSBub2RlXG4gICAgICBmb3IgY2hpbGQsIGluZGV4IGluIG5vZGVcbiAgICAgICAgbm9kZVtpbmRleF0gPSBAdmlzaXQgY2hpbGRcbiAgICAgIHJldHVybiBub2RlXG4gICAgaWYgIW5vZGUuX1ROb2RlXG4gICAgICB0aHJvdyBuZXcgRXJyb3IgXCJEb2VzIG5vdCBpbXBsZW1lbnQgVE5vZGU6ICAje0pTT04uc3RyaW5naWZ5KG5vZGUpfVwiXG4gICAgZm9yIGNoaWxkLCBpbmRleCBpbiBub2RlLm5vZGVzXG4gICAgICBub2RlLm5vZGVzW2luZGV4XSA9IEB2aXNpdCBjaGlsZFxuICAgIHJldHVybiBub2RlXG5cbiAgdmlzaXRUZXJtOiAobm9kZSkgLT5cbiAgICBpZiBAdG9wKC0xKSBpbnN0YW5jZW9mIEJsb2NrXG4gICAgICByZXR1cm4gbmV3IEFzc2VydChuZXcgQ2xhdXNlKG5vZGUsIF9leGlzdHMsIF9udWxsKSlcbiAgICByZXR1cm4gbm9kZVxuXG4gIHZpc2l0Q2xhdXNlOiAobm9kZSkgLT5cbiAgICBwYXJlbnQgPSBAdG9wKC0xKVxuICAgIGlmIHBhcmVudCBpbnN0YW5jZW9mIEJsb2NrXG4gICAgICBpZiBub2RlLnN1YmogPT0gX251bGxcbiAgICAgICAgbm9kZS50eXBlID0gX0FjaGlldmVcbiAgICAgICAgcmV0dXJuIG5ldyBBdHRlbXB0KG5vZGUpXG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiBuZXcgQXNzZXJ0KG5vZGUpXG4gICAgZWxzZVxuICAgICAgaWYgbm9kZS5zdWJqID09IF9udWxsICYmIEBzdWJqXG4gICAgICAgIG5vZGUuc3ViaiA9IEBzdWJqXG4gICAgcmV0dXJuIG5vZGVcblxuICB2aXNpdFNlbnRlbmNlOiAobm9kZSkgLT5cbiAgICBjbGF1c2UgPSBub2RlLmNsYXVzZVxuICAgIHtzdWJqLCB2ZXJifSA9IGNsYXVzZVxuICAgIHJlc3VsdCA9IFtAdmlzaXRDbGF1c2UgY2xhdXNlXVxuICAgIGZvciBvYmogaW4gbm9kZS5saXN0XG4gICAgICByZXN1bHQucHVzaCBAdmlzaXRDbGF1c2UgbmV3IENsYXVzZShzdWJqLCB2ZXJiLCBvYmopXG4gICAgcmV0dXJuIHJlc3VsdFxuXG4gIHZpc2l0UGFyYWdyYXBoOiAobm9kZSkgLT5cbiAgICB7QHN1YmosIGxpc3R9ID0gbm9kZVxuICAgIEB2aXNpdE5vZGUobm9kZSlcbiAgICByZXN1bHQgPSBbQHZpc2l0VGVybShAc3ViaildXG4gICAgZm9yIGNsYXVzZSBpbiBub2RlLmxpc3RcbiAgICAgIHN1YmNsYXVzZSA9IEB2aXNpdENsYXVzZSBjbGF1c2VcbiAgICAgIGlmIEFycmF5LmlzQXJyYXkgc3ViY2xhdXNlXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQgc3ViY2xhdXNlXG4gICAgICBlbHNlXG4gICAgICAgIHJlc3VsdC5wdXNoIHN1YmNsYXVzZVxuICAgIHJldHVybiByZXN1bHRcblxuZXhwb3J0cy5UcmFuc2Zvcm1lciA9IFRyYW5zZm9ybWVyXG4iXX0=
