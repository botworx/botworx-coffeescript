(function() {
  var $exists, Analyzer, AnalyzerBase, AstVisitor, CallStmt, Clause, UnaryExpr, _null;

  ({AstVisitor} = require('./astvisitor'));

  ({_null, $exists, CallStmt, UnaryExpr, Clause} = require('./yy'));

  AnalyzerBase = class AnalyzerBase extends AstVisitor {
    constructor() {
      super();
      this.delegator_({
        Module: this.visitBlock,
        Block: this.visitBlock,
        Query: this.visitQuery,
        Def: this.visitDef,
        DefG: this.visitDef,
        Trigger: this.visitTrigger,
        Variable: this.visitVar,
        Clause: this.visitClause,
        Properties: this.visitProperties,
        Property: this.visitProperty,
        Lhs: this.visitLhs,
        Assert: this.visitMessage,
        "=": this.visitBinaryExpr
      });
    }

    visitVar(n) {
      return this.scope.var_(n, this.value);
    }

    visitStatement(node) {
      this.stmt = this.scope_(node);
      return this.visitNode(node);
    }

    visitBlock(node) {
      this.block = this.scope_(node);
      return this.visitNode(node);
    }

    visitDef(node) {
      this.visit(node.trigger);
      node.body.scope = node.trigger.scope;
      return this.visit(node.body);
    }

    visitTrigger(node) {
      this.scope_(node);
      this.delegator_({
        Variable: function(n) {
          return this.scope.var_(n, this.value);
        }
      });
      this.value = "@msg.data";
      this.visit(node.binding);
      this.value = "@msg.data.subj";
      this.visit(node.subj);
      this.value = "@msg.data.verb";
      this.visit(node.verb);
      this.value = "@msg.data.obj";
      this.visit(node.obj);
      return this.visit(node.xtra);
    }

    visitClause(n) {
      this.visit(n.subj);
      this.visit(n.verb);
      this.visit(n.obj);
      return this.visit(n.xtra);
    }

    visitProperties(n) {
      var c, i, len, ref, results;
      ref = n.nodes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        this.value = `@msg.data.${c.name}`;
        results.push(this.visit(c));
      }
      return results;
    }

    visitProperty(n) {
      return this.visit(n.value);
    }

    visitQuery(node) {
      this.delegator_({
        Variable: function(n) {
          return this.scope.qvar_(n, this.value);
        }
      });
      return this.visitStatement(node);
    }

    visitLhs(node) {
      node.nodes[0].first = true;
      return this.visitNode(node);
    }

    visitContextualize(n) {
      var c, i, len, ref, results;
      this.visit(n.left);
      ref = n.right;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        results.push(this.visit(c));
      }
      return results;
    }

    visitMessage(n) {
      return this.visit(n.arg);
    }

    visitUnaryExpr(n) {
      return this.visit(n.arg);
    }

    visitBinaryExpr(n) {
      this.visit(n.left);
      return this.visit(n.right);
    }

  };

  Analyzer = class Analyzer extends AnalyzerBase {
    constructor() {
      super();
    }

    analyze(ast, options) {
      this.visit(ast);
      return ast;
    }

  };

  exports.Analyzer = Analyzer;

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbHl6ZXIuanMiLCJzb3VyY2VzIjpbImFuYWx5emVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxZQUFBLEVBQUEsVUFBQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUEsU0FBQSxFQUFBOztFQUFBLENBQUEsQ0FBQyxVQUFELENBQUEsR0FBZSxPQUFBLENBQVEsY0FBUixDQUFmOztFQUNBLENBQUEsQ0FBQyxLQUFELEVBQVEsT0FBUixFQUFpQixRQUFqQixFQUEyQixTQUEzQixFQUFzQyxNQUF0QyxDQUFBLEdBQWdELE9BQUEsQ0FBUSxNQUFSLENBQWhEOztFQUVNLGVBQU4sTUFBQSxhQUFBLFFBQTJCLFdBQTNCO0lBQ0UsV0FBYSxDQUFBLENBQUE7V0FDWCxDQUFBO01BQ0EsSUFBQyxDQUFBLFVBQUQsQ0FDRTtRQUFBLE1BQUEsRUFBUSxJQUFDLENBQUEsVUFBVDtRQUNBLEtBQUEsRUFBTyxJQUFDLENBQUEsVUFEUjtRQUVBLEtBQUEsRUFBTyxJQUFDLENBQUEsVUFGUjtRQUdBLEdBQUEsRUFBSyxJQUFDLENBQUEsUUFITjtRQUlBLElBQUEsRUFBTSxJQUFDLENBQUEsUUFKUDtRQUtBLE9BQUEsRUFBUyxJQUFDLENBQUEsWUFMVjtRQU1BLFFBQUEsRUFBVSxJQUFDLENBQUEsUUFOWDtRQU9BLE1BQUEsRUFBUSxJQUFDLENBQUEsV0FQVDtRQVFBLFVBQUEsRUFBWSxJQUFDLENBQUEsZUFSYjtRQVNBLFFBQUEsRUFBVSxJQUFDLENBQUEsYUFUWDtRQVVBLEdBQUEsRUFBSyxJQUFDLENBQUEsUUFWTjtRQVdBLE1BQUEsRUFBUSxJQUFDLENBQUEsWUFYVDtRQVlBLEdBQUEsRUFBSyxJQUFDLENBQUE7TUFaTixDQURGO0lBRlc7O0lBaUJiLFFBQVUsQ0FBQyxDQUFELENBQUE7YUFDUixJQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsQ0FBWSxDQUFaLEVBQWUsSUFBQyxDQUFBLEtBQWhCO0lB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SUFBVDtBQUNBO0FBQUE7TUFBQSxLQUFBLHFDQUFBOztxQkFDRSxJQUFDLENBQUEsS0FBRCxDQUFPLENBQVA7TUFERixDQUFBOztJQUZrQjs7SUFLcEIsWUFBYyxDQUFDLENBQUQsQ0FBQTthQUNaLElBQUMsQ0FBQSxLQUFELENBQU8sQ0FBQyxDQUFDLEdBQVQ7SUFEWTs7SUFHZCxjQUFnQixDQUFDLENBQUQsQ0FBQTthQUNkLElBQUMsQ0FBQSxLQUFELENBQU8sQ0FBQyxDQUFDLEdBQVQ7SUFEYzs7SUFHaEIsZUFBaUIsQ0FBQyxDQUFELENBQUE7TUFDZixJQUFDLENBQUEsS0FBRCxDQUFPLENBQUMsQ0FBQyxJQUFUO2FBQ0EsSUFBQyxDQUFBLEtBQUQsQ0FBTyxDQUFDLENBQUMsS0FBVDtJQUZlOztFQXBGbkI7O0VBd0ZNLFdBQU4sTUFBQSxTQUFBLFFBQXVCLGFBQXZCO0lBQ0UsV0FBYSxDQUFBLENBQUE7V0FDWCxDQUFBO0lBRFc7O0lBR2IsT0FBUyxDQUFDLEdBQUQsRUFBTSxPQUFOLENBQUE7TUFDUCxJQUFDLENBQUEsS0FBRCxDQUFPLEdBQVA7QUFDQSxhQUFPO0lBRkE7O0VBSlg7O0VBUUEsT0FBTyxDQUFDLFFBQVIsR0FBbUI7QUFuR25CIiwic291cmNlc0NvbnRlbnQiOlsie0FzdFZpc2l0b3J9ID0gcmVxdWlyZSAnLi9hc3R2aXNpdG9yJ1xue19udWxsLCAkZXhpc3RzLCBDYWxsU3RtdCwgVW5hcnlFeHByLCBDbGF1c2V9ID0gcmVxdWlyZSAnLi95eSdcblxuY2xhc3MgQW5hbHl6ZXJCYXNlIGV4dGVuZHMgQXN0VmlzaXRvclxuICBjb25zdHJ1Y3RvcjogLT5cbiAgICBzdXBlcigpXG4gICAgQGRlbGVnYXRvcl9cbiAgICAgIE1vZHVsZTogQHZpc2l0QmxvY2tcbiAgICAgIEJsb2NrOiBAdmlzaXRCbG9ja1xuICAgICAgUXVlcnk6IEB2aXNpdFF1ZXJ5XG4gICAgICBEZWY6IEB2aXNpdERlZlxuICAgICAgRGVmRzogQHZpc2l0RGVmXG4gICAgICBUcmlnZ2VyOiBAdmlzaXRUcmlnZ2VyXG4gICAgICBWYXJpYWJsZTogQHZpc2l0VmFyXG4gICAgICBDbGF1c2U6IEB2aXNpdENsYXVzZVxuICAgICAgUHJvcGVydGllczogQHZpc2l0UHJvcGVydGllc1xuICAgICAgUHJvcGVydHk6IEB2aXNpdFByb3BlcnR5XG4gICAgICBMaHM6IEB2aXNpdExoc1xuICAgICAgQXNzZXJ0OiBAdmlzaXRNZXNzYWdlXG4gICAgICBcIj1cIjogQHZpc2l0QmluYXJ5RXhwclxuXG4gIHZpc2l0VmFyOiAobikgLT5cbiAgICBAc2NvcGUudmFyXyBuLCBAdmFsdWVcblxuICB2aXNpdFN0YXRlbWVudDogKG5vZGUpIC0+XG4gICAgQHN0bXQgPSBAc2NvcGVfKG5vZGUpXG4gICAgQHZpc2l0Tm9kZShub2RlKVxuXG4gIHZpc2l0QmxvY2s6IChub2RlKSAtPlxuICAgIEBibG9jayA9IEBzY29wZV8obm9kZSlcbiAgICBAdmlzaXROb2RlKG5vZGUpXG5cbiAgdmlzaXREZWY6IChub2RlKSAtPlxuICAgIEB2aXNpdChub2RlLnRyaWdnZXIpXG4gICAgbm9kZS5ib2R5LnNjb3BlID0gbm9kZS50cmlnZ2VyLnNjb3BlXG4gICAgQHZpc2l0KG5vZGUuYm9keSlcblxuICB2aXNpdFRyaWdnZXI6IChub2RlKSAtPlxuICAgIEBzY29wZV8obm9kZSlcbiAgICBAZGVsZWdhdG9yX1xuICAgICAgVmFyaWFibGU6IChuKSAtPlxuICAgICAgICBAc2NvcGUudmFyXyBuLCBAdmFsdWVcbiAgICBAdmFsdWUgPSBcIkBtc2cuZGF0YVwiXG4gICAgQHZpc2l0IG5vZGUuYmluZGluZ1xuICAgIEB2YWx1ZSA9IFwiQG1zZy5kYXRhLnN1YmpcIlxuICAgIEB2aXNpdCBub2RlLnN1YmpcbiAgICBAdmFsdWUgPSBcIkBtc2cuZGF0YS52ZXJiXCJcbiAgICBAdmlzaXQgbm9kZS52ZXJiXG4gICAgQHZhbHVlID0gXCJAbXNnLmRhdGEub2JqXCJcbiAgICBAdmlzaXQgbm9kZS5vYmpcbiAgICBAdmlzaXQgbm9kZS54dHJhXG5cbiAgdmlzaXRDbGF1c2U6IChuKSAtPlxuICAgIEB2aXNpdChuLnN1YmopXG4gICAgQHZpc2l0KG4udmVyYilcbiAgICBAdmlzaXQobi5vYmopXG4gICAgQHZpc2l0KG4ueHRyYSlcblxuICB2aXNpdFByb3BlcnRpZXM6IChuKSAtPlxuICAgIGZvciBjIGluIG4ubm9kZXNcbiAgICAgIEB2YWx1ZSA9IFwiQG1zZy5kYXRhLiN7Yy5uYW1lfVwiXG4gICAgICBAdmlzaXQoYylcblxuICB2aXNpdFByb3BlcnR5OiAobikgLT5cbiAgICBAdmlzaXQobi52YWx1ZSlcblxuICB2aXNpdFF1ZXJ5OiAobm9kZSkgLT5cbiAgICBAZGVsZWdhdG9yX1xuICAgICAgVmFyaWFibGU6IChuKSAtPlxuICAgICAgICBAc2NvcGUucXZhcl8gbiwgQHZhbHVlXG4gICAgQHZpc2l0U3RhdGVtZW50IG5vZGVcblxuICB2aXNpdExoczogKG5vZGUpIC0+XG4gICAgbm9kZS5ub2Rlc1swXS5maXJzdCA9IHRydWVcbiAgICBAdmlzaXROb2RlIG5vZGVcblxuICB2aXNpdENvbnRleHR1YWxpemU6IChuKSAtPlxuICAgIEB2aXNpdChuLmxlZnQpXG4gICAgZm9yIGMgaW4gbi5yaWdodFxuICAgICAgQHZpc2l0KGMpXG5cbiAgdmlzaXRNZXNzYWdlOiAobikgLT5cbiAgICBAdmlzaXQobi5hcmcpXG5cbiAgdmlzaXRVbmFyeUV4cHI6IChuKSAtPlxuICAgIEB2aXNpdChuLmFyZylcblxuICB2aXNpdEJpbmFyeUV4cHI6IChuKSAtPlxuICAgIEB2aXNpdChuLmxlZnQpXG4gICAgQHZpc2l0KG4ucmlnaHQpXG5cbmNsYXNzIEFuYWx5emVyIGV4dGVuZHMgQW5hbHl6ZXJCYXNlXG4gIGNvbnN0cnVjdG9yOiAtPlxuICAgIHN1cGVyKClcblxuICBhbmFseXplOiAoYXN0LCBvcHRpb25zKSAtPlxuICAgIEB2aXNpdChhc3QpXG4gICAgcmV0dXJuIGFzdFxuXG5leHBvcnRzLkFuYWx5emVyID0gQW5hbHl6ZXJcbiJdfQ==
