(function() {
  var $$, COMMENT, EOF, INDENT, LONGARROW, LONGFATARROW, Lexer, MiaLexer, NEWLINE, NOTARROW, NOTFATARROW, OUTDENT, SEMICOLON, TERMINATOR, grammar, supressor, symbols, terminals, unit_;

  ({unit_} = require('./common'));

  $$ = unit_(module);

  grammar = require("./grammar");

  symbols = grammar.parser.symbols_;

  terminals = grammar.parser.terminals_;

  ({EOF, COMMENT, NEWLINE, SEMICOLON, TERMINATOR, INDENT, OUTDENT} = symbols);

  ({LONGARROW, NOTARROW, LONGFATARROW, NOTFATARROW} = symbols);

  supressor = {
    LONGARROW: true,
    NOTARROW: true,
    LONGFATARROW: true,
    NOTFATARROW: true
  };

  Lexer = function() {};

  Lexer.prototype = grammar.parser.lexer;

  MiaLexer = class MiaLexer extends Lexer {
    constructor() {
      super();
      this.prevToken = TERMINATOR;
      this.indentstack = [0];
      this.queue = [];
    }

    lex() {
      var indent, nextTok, tok;
      tok = nextTok = null;
      indent = 0;
      if (this.queue.length !== 0) {
        tok = this.queue.shift();
        this.prevToken = tok;
        return tok;
      }
      tok = super.lex();
      switch (tok) {
        case SEMICOLON:
          this.queue.push(TERMINATOR);
          break;
        case EOF:
          while (this.indentstack[this.indentstack.length - 1] > 0) {
            this.indentstack.pop();
            this.queue.push(OUTDENT);
          }
          this.queue.push(tok);
          break;
        case NEWLINE:
          nextTok = super.lex();
          while (nextTok === NEWLINE) {
            nextTok = super.lex();
          }
          //console.log "Lookahead: #{terminals[nextTok]}"
          indent = this.yylloc.first_column;
          if (indent > this.indentstack[this.indentstack.length - 1]) {
            this.indentstack.push(indent);
            this.queue.push(INDENT);
          } else if (indent < this.indentstack[this.indentstack.length - 1]) {
            while (indent < this.indentstack[this.indentstack.length - 1]) {
              this.indentstack.pop();
              this.queue.push(OUTDENT);
            }
            if (!supressor[terminals[nextTok]]) {
              this.queue.push(TERMINATOR);
            }
          } else {
            if (this.prevToken !== TERMINATOR) {
              this.queue.push(TERMINATOR);
            }
          }
          this.queue.push(nextTok);
          break;
        default:
          this.queue.push(tok);
      }
      tok = this.queue.shift();
      this.prevToken = tok;
      return tok;
    }

  };

  exports.MiaLexer = MiaLexer;

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlhbGV4ZXIuanMiLCJzb3VyY2VzIjpbIm1pYWxleGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLFNBQUEsRUFBQSxZQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLFdBQUEsRUFBQSxPQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUEsRUFBQSxPQUFBLEVBQUEsU0FBQSxFQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUE7O0VBQUEsQ0FBQSxDQUFDLEtBQUQsQ0FBQSxHQUFVLE9BQUEsQ0FBUSxVQUFSLENBQVY7O0VBQ0EsRUFBQSxHQUFLLEtBQUEsQ0FBTSxNQUFOOztFQUVMLE9BQUEsR0FBVSxPQUFBLENBQVEsV0FBUjs7RUFDVixPQUFBLEdBQVUsT0FBTyxDQUFDLE1BQU0sQ0FBQzs7RUFDekIsU0FBQSxHQUFZLE9BQU8sQ0FBQyxNQUFNLENBQUM7O0VBRTNCLENBQUEsQ0FBQyxHQUFELEVBQU0sT0FBTixFQUFlLE9BQWYsRUFBd0IsU0FBeEIsRUFBbUMsVUFBbkMsRUFBK0MsTUFBL0MsRUFBdUQsT0FBdkQsQ0FBQSxHQUFrRSxPQUFsRTs7RUFDQSxDQUFBLENBQUMsU0FBRCxFQUFZLFFBQVosRUFBc0IsWUFBdEIsRUFBb0MsV0FBcEMsQ0FBQSxHQUFtRCxPQUFuRDs7RUFFQSxTQUFBLEdBQ0U7SUFBQSxTQUFBLEVBQVcsSUFBWDtJQUNBLFFBQUEsRUFBVSxJQURWO0lBRUEsWUFBQSxFQUFjLElBRmQ7SUFHQSxXQUFBLEVBQWE7RUFIYjs7RUFLRixLQUFBLEdBQVEsUUFBQSxDQUFBLENBQUEsRUFBQTs7RUFDUixLQUFLLENBQUMsU0FBTixHQUFrQixPQUFPLENBQUMsTUFBTSxDQUFDOztFQUUzQixXQUFOLE1BQUEsU0FBQSxRQUF1QixNQUF2QjtJQUNFLFdBQWEsQ0FBQSxDQUFBO1dBQ1gsQ0FBQTtNQUNBLElBQUMsQ0FBQSxTQUFELEdBQWE7TUFDYixJQUFDLENBQUEsV0FBRCxHQUFlLENBQUMsQ0FBRDtNQUNmLElBQUMsQ0FBQSxLQUFELEdBQVM7SUFKRTs7SUFNYixHQUFLLENBQUEsQ0FBQTtBQUNILFVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQTtNQUFBLEdBQUEsR0FBTSxPQUFBLEdBQVU7TUFDaEIsTUFBQSxHQUFTO01BQ1QsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsS0FBaUIsQ0FBcEI7UUFDRSxHQUFBLEdBQU0sSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLENBQUE7UUFDTixJQUFDLENBQUEsU0FBRCxHQUFhO0FBQ2IsZUFBTyxJQUhUOztNQUtBLEdBQUEsUUFSRixDQUFBLEdBUVEsQ0FBQTtBQUNOLGNBQU8sR0FBUDtBQUFBLGFBQ08sU0FEUDtVQUVJLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxDQUFZLFVBQVo7QUFERztBQURQLGFBSU8sR0FKUDtBQUtJLGlCQUFNLElBQUMsQ0FBQSxXQUFZLENBQUEsSUFBQyxDQUFBLFdBQVcsQ0FBQyxNQUFiLEdBQW9CLENBQXBCLENBQWIsR0FBc0MsQ0FBNUM7WUFDRSxJQUFDLENBQUEsV0FBVyxDQUFDLEdBQWIsQ0FBQTtZQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxDQUFZLE9BQVo7VUFGRjtVQUdBLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxDQUFZLEdBQVo7QUFKRztBQUpQLGFBVU8sT0FWUDtVQVdJLE9BQUEsUUFwQk4sQ0FBQSxHQW9CZ0IsQ0FBQTtBQUNRLGlCQUFNLE9BQUEsS0FBVyxPQUFqQjtZQUFsQixPQUFBLFFBckJOLENBQUEsR0FxQmdCLENBQUE7VUFBUSxDQURsQjs7VUFHQSxNQUFBLEdBQVMsSUFBQyxDQUFBLE1BQU0sQ0FBQztVQUNqQixJQUFHLE1BQUEsR0FBUyxJQUFDLENBQUEsV0FBWSxDQUFBLElBQUMsQ0FBQSxXQUFXLENBQUMsTUFBYixHQUFvQixDQUFwQixDQUF6QjtZQUNFLElBQUMsQ0FBQSxXQUFXLENBQUMsSUFBYixDQUFrQixNQUFsQjtZQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxDQUFZLE1BQVosRUFGRjtXQUFBLE1BSUssSUFBRyxNQUFBLEdBQVMsSUFBQyxDQUFBLFdBQVksQ0FBQSxJQUFDLENBQUEsV0FBVyxDQUFDLE1BQWIsR0FBb0IsQ0FBcEIsQ0FBekI7QUFDSCxtQkFBTSxNQUFBLEdBQVMsSUFBQyxDQUFBLFdBQVksQ0FBQSxJQUFDLENBQUEsV0FBVyxDQUFDLE1BQWIsR0FBb0IsQ0FBcEIsQ0FBNUI7Y0FDRSxJQUFDLENBQUEsV0FBVyxDQUFDLEdBQWIsQ0FBQTtjQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxDQUFZLE9BQVo7WUFGRjtZQUlBLElBQUcsQ0FBQyxTQUFVLENBQUEsU0FBVSxDQUFBLE9BQUEsQ0FBVixDQUFkO2NBQ0UsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQVksVUFBWixFQURGO2FBTEc7V0FBQSxNQUFBO1lBU0gsSUFBRyxJQUFDLENBQUEsU0FBRCxLQUFjLFVBQWpCO2NBQ0UsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQVksVUFBWixFQURGO2FBVEc7O1VBV0wsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQVksT0FBWjtBQXBCRztBQVZQO1VBaUNJLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxDQUFZLEdBQVo7QUFqQ0o7TUFtQ0EsR0FBQSxHQUFNLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxDQUFBO01BQ04sSUFBQyxDQUFBLFNBQUQsR0FBYTtBQUNiLGFBQU87SUE5Q0o7O0VBUFA7O0VBdURBLE9BQU8sQ0FBQyxRQUFSLEdBQW1CO0FBMUVuQiIsInNvdXJjZXNDb250ZW50IjpbInt1bml0X30gPSByZXF1aXJlKCcuL2NvbW1vbicpXG4kJCA9IHVuaXRfIG1vZHVsZVxuXG5ncmFtbWFyID0gcmVxdWlyZShcIi4vZ3JhbW1hclwiKVxuc3ltYm9scyA9IGdyYW1tYXIucGFyc2VyLnN5bWJvbHNfXG50ZXJtaW5hbHMgPSBncmFtbWFyLnBhcnNlci50ZXJtaW5hbHNfXG5cbntFT0YsIENPTU1FTlQsIE5FV0xJTkUsIFNFTUlDT0xPTiwgVEVSTUlOQVRPUiwgSU5ERU5ULCBPVVRERU5UfSA9IHN5bWJvbHNcbntMT05HQVJST1csIE5PVEFSUk9XLCBMT05HRkFUQVJST1csIE5PVEZBVEFSUk9XfSA9IHN5bWJvbHNcblxuc3VwcmVzc29yID1cbiAgTE9OR0FSUk9XOiB0cnVlXG4gIE5PVEFSUk9XOiB0cnVlXG4gIExPTkdGQVRBUlJPVzogdHJ1ZVxuICBOT1RGQVRBUlJPVzogdHJ1ZVxuICBcbkxleGVyID0gLT5cbkxleGVyLnByb3RvdHlwZSA9IGdyYW1tYXIucGFyc2VyLmxleGVyXG5cbmNsYXNzIE1pYUxleGVyIGV4dGVuZHMgTGV4ZXJcbiAgY29uc3RydWN0b3I6IC0+XG4gICAgc3VwZXIoKVxuICAgIEBwcmV2VG9rZW4gPSBURVJNSU5BVE9SXG4gICAgQGluZGVudHN0YWNrID0gWzBdXG4gICAgQHF1ZXVlID0gW11cblxuICBsZXg6IC0+XG4gICAgdG9rID0gbmV4dFRvayA9IG51bGxcbiAgICBpbmRlbnQgPSAwXG4gICAgaWYgQHF1ZXVlLmxlbmd0aCAhPSAwXG4gICAgICB0b2sgPSBAcXVldWUuc2hpZnQoKVxuICAgICAgQHByZXZUb2tlbiA9IHRva1xuICAgICAgcmV0dXJuIHRva1xuXG4gICAgdG9rID0gc3VwZXIoKVxuICAgIHN3aXRjaCB0b2tcbiAgICAgIHdoZW4gU0VNSUNPTE9OXG4gICAgICAgIEBxdWV1ZS5wdXNoIFRFUk1JTkFUT1JcblxuICAgICAgd2hlbiBFT0ZcbiAgICAgICAgd2hpbGUgQGluZGVudHN0YWNrW0BpbmRlbnRzdGFjay5sZW5ndGgtMV0gPiAwXG4gICAgICAgICAgQGluZGVudHN0YWNrLnBvcCgpXG4gICAgICAgICAgQHF1ZXVlLnB1c2ggT1VUREVOVFxuICAgICAgICBAcXVldWUucHVzaCB0b2tcblxuICAgICAgd2hlbiBORVdMSU5FXG4gICAgICAgIG5leHRUb2sgPSBzdXBlcigpXG4gICAgICAgIG5leHRUb2sgPSBzdXBlcigpIHdoaWxlIG5leHRUb2sgPT0gTkVXTElORVxuICAgICAgICAjY29uc29sZS5sb2cgXCJMb29rYWhlYWQ6ICN7dGVybWluYWxzW25leHRUb2tdfVwiXG4gICAgICAgIGluZGVudCA9IEB5eWxsb2MuZmlyc3RfY29sdW1uXG4gICAgICAgIGlmIGluZGVudCA+IEBpbmRlbnRzdGFja1tAaW5kZW50c3RhY2subGVuZ3RoLTFdXG4gICAgICAgICAgQGluZGVudHN0YWNrLnB1c2ggaW5kZW50XG4gICAgICAgICAgQHF1ZXVlLnB1c2ggSU5ERU5UXG5cbiAgICAgICAgZWxzZSBpZiBpbmRlbnQgPCBAaW5kZW50c3RhY2tbQGluZGVudHN0YWNrLmxlbmd0aC0xXVxuICAgICAgICAgIHdoaWxlIGluZGVudCA8IEBpbmRlbnRzdGFja1tAaW5kZW50c3RhY2subGVuZ3RoLTFdXG4gICAgICAgICAgICBAaW5kZW50c3RhY2sucG9wKClcbiAgICAgICAgICAgIEBxdWV1ZS5wdXNoKE9VVERFTlQpXG4gICAgICAgICAgICAjY29uc29sZS5sb2coJ09VVERFTlQnKVxuICAgICAgICAgIGlmICFzdXByZXNzb3JbdGVybWluYWxzW25leHRUb2tdXVxuICAgICAgICAgICAgQHF1ZXVlLnB1c2goVEVSTUlOQVRPUilcblxuICAgICAgICBlbHNlXG4gICAgICAgICAgaWYgQHByZXZUb2tlbiAhPSBURVJNSU5BVE9SXG4gICAgICAgICAgICBAcXVldWUucHVzaCBURVJNSU5BVE9SXG4gICAgICAgIEBxdWV1ZS5wdXNoIG5leHRUb2tcblxuICAgICAgZWxzZVxuICAgICAgICBAcXVldWUucHVzaCB0b2tcblxuICAgIHRvayA9IEBxdWV1ZS5zaGlmdCgpXG4gICAgQHByZXZUb2tlbiA9IHRva1xuICAgIHJldHVybiB0b2tcblxuZXhwb3J0cy5NaWFMZXhlciA9IE1pYUxleGVyXG4iXX0=
