(function() {
  var $$, MiaCompiler, MiaLexer, MiaParser, assert, compiler, grammar, process, unit_, yy;

  assert = require('assert');

  process = require('process');

  ({unit_, grammar, yy, compiler, MiaLexer, MiaParser, MiaCompiler} = require('./common'));

  $$ = unit_(module);

  describe('MiaCompiler', function() {
    return describe('@compile', function() {
      return it('should work', function() {
        /*
        Parser
        */
        var ast, data, err, lexer, out, parser, terminals, tok;
        terminals = grammar.parser.terminals_;
        lexer = new MiaLexer();
        data = "def (hello)\n\n  def (say $t)\n    | $t\n\n  say \"Hello World\"\n  say \"Goodbye World\"\n\nhello";
        $$.h2('Data Begin');
        $$._(data);
        $$.h2('Data End');
        $$.h2('Lex Begin');
        lexer.setInput(data);
        while ((tok = lexer.lex()) !== lexer.EOF) {
          $$._(terminals[tok]);
        }
        $$.h2('Lex End');
        parser = new MiaParser(lexer, yy);
        $$.h2('Parse Begin');
        try {
          ast = parser.parse(data);
        } catch (error) {
          err = error;
          $$._(err.message);
          $$._(err.hash);
        }
        $$.h2('Parse End');
        $$.h2('AST Begin');
        $$._(JSON.stringify(ast, null, 2));
        $$.h2('AST End');
        $$.h2('Compiler Begin');
        
        out = process.stdout;
        
        compiler = new MiaCompiler(out);
        return compiler.compile(ast);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlhY29tcGlsZXIuanMiLCJzb3VyY2VzIjpbIm1pYWNvbXBpbGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQSxFQUFBLFdBQUEsRUFBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUE7O0VBQUEsTUFBQSxHQUFTLE9BQUEsQ0FBUSxRQUFSOztFQUNULE9BQUEsR0FBVSxPQUFBLENBQVEsU0FBUjs7RUFFVixDQUFBLENBQUMsS0FBRCxFQUFRLE9BQVIsRUFBaUIsRUFBakIsRUFBcUIsUUFBckIsRUFBK0IsUUFBL0IsRUFDQSxTQURBLEVBQ1csV0FEWCxDQUFBLEdBQzBCLE9BQUEsQ0FBUSxVQUFSLENBRDFCOztFQUVBLEVBQUEsR0FBSyxLQUFBLENBQU0sTUFBTjs7RUFFTCxRQUFBLENBQVMsYUFBVCxFQUF3QixRQUFBLENBQUEsQ0FBQTtXQUN0QixRQUFBLENBQVMsVUFBVCxFQUFxQixRQUFBLENBQUEsQ0FBQTthQUNuQixFQUFBLENBQUcsYUFBSCxFQUFrQixRQUFBLENBQUEsQ0FBQSxFQUFBOzs7O0FBQ2hCLFlBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxNQUFBLEVBQUEsU0FBQSxFQUFBO1FBQUEsU0FBQSxHQUFZLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDM0IsS0FBQSxHQUFRLElBQUksUUFBSixDQUFBO1FBQ1IsSUFBQSxHQUNBO1FBV0EsRUFBRSxDQUFDLEVBQUgsQ0FBTSxZQUFOO1FBQ0EsRUFBRSxDQUFDLENBQUgsQ0FBSyxJQUFMO1FBQ0EsRUFBRSxDQUFDLEVBQUgsQ0FBTSxVQUFOO1FBQ0EsRUFBRSxDQUFDLEVBQUgsQ0FBTSxXQUFOO1FBQ0EsS0FBSyxDQUFDLFFBQU4sQ0FBZSxJQUFmO0FBQ0EsZUFBTSxDQUFDLEdBQUEsR0FBTSxLQUFLLENBQUMsR0FBTixDQUFBLENBQVAsQ0FBQSxLQUF1QixLQUFLLENBQUMsR0FBbkM7VUFDRSxFQUFFLENBQUMsQ0FBSCxDQUFLLFNBQVUsQ0FBQSxHQUFBLENBQWY7UUFERjtRQUVBLEVBQUUsQ0FBQyxFQUFILENBQU0sU0FBTjtRQUlBLE1BQUEsR0FBUyxJQUFJLFNBQUosQ0FBYyxLQUFkLEVBQXFCLEVBQXJCO1FBRVQsRUFBRSxDQUFDLEVBQUgsQ0FBTSxhQUFOO0FBQ0E7VUFDRSxHQUFBLEdBQU0sTUFBTSxDQUFDLEtBQVAsQ0FBYSxJQUFiLEVBRFI7U0FBQSxhQUFBO1VBRU07VUFDSixFQUFFLENBQUMsQ0FBSCxDQUFLLEdBQUcsQ0FBQyxPQUFUO1VBQ0EsRUFBRSxDQUFDLENBQUgsQ0FBSyxHQUFHLENBQUMsSUFBVCxFQUpGOztRQU1BLEVBQUUsQ0FBQyxFQUFILENBQU0sV0FBTjtRQUNBLEVBQUUsQ0FBQyxFQUFILENBQU0sV0FBTjtRQUNBLEVBQUUsQ0FBQyxDQUFILENBQUssSUFBSSxDQUFDLFNBQUwsQ0FBZSxHQUFmLEVBQW9CLElBQXBCLEVBQTBCLENBQTFCLENBQUw7UUFDQSxFQUFFLENBQUMsRUFBSCxDQUFNLFNBQU47UUFFQSxFQUFFLENBQUMsRUFBSCxDQUFNLGdCQUFOOztRQUVBLEdBQUEsR0FBTSxPQUFPLENBQUM7O1FBRWQsUUFBQSxHQUFXLElBQUksV0FBSixDQUFnQixHQUFoQjtlQUNYLFFBQVEsQ0FBQyxPQUFULENBQWlCLEdBQWpCO01BN0NnQixDQUFsQjtJQURtQixDQUFyQjtFQURzQixDQUF4QjtBQVBBIiwic291cmNlc0NvbnRlbnQiOlsiYXNzZXJ0ID0gcmVxdWlyZSAnYXNzZXJ0J1xucHJvY2VzcyA9IHJlcXVpcmUgJ3Byb2Nlc3MnXG5cbnt1bml0XywgZ3JhbW1hciwgeXksIGNvbXBpbGVyLCBNaWFMZXhlcixcbk1pYVBhcnNlciwgTWlhQ29tcGlsZXJ9ID0gcmVxdWlyZSgnLi9jb21tb24nKVxuJCQgPSB1bml0XyBtb2R1bGVcblxuZGVzY3JpYmUgJ01pYUNvbXBpbGVyJywgLT5cbiAgZGVzY3JpYmUgJ0Bjb21waWxlJywgLT5cbiAgICBpdCAnc2hvdWxkIHdvcmsnLCAtPlxuICAgICAgdGVybWluYWxzID0gZ3JhbW1hci5wYXJzZXIudGVybWluYWxzX1xuICAgICAgbGV4ZXIgPSBuZXcgTWlhTGV4ZXIoKVxuICAgICAgZGF0YSA9XG4gICAgICBcIlwiXCJcbiAgICAgIGRlZiAoaGVsbG8pXG5cbiAgICAgICAgZGVmIChzYXkgJHQpXG4gICAgICAgICAgfCAkdFxuXG4gICAgICAgIHNheSBcIkhlbGxvIFdvcmxkXCJcbiAgICAgICAgc2F5IFwiR29vZGJ5ZSBXb3JsZFwiXG5cbiAgICAgIGhlbGxvXG4gICAgICBcIlwiXCJcbiAgICAgICQkLmgyKCdEYXRhIEJlZ2luJylcbiAgICAgICQkLl8gZGF0YVxuICAgICAgJCQuaDIoJ0RhdGEgRW5kJylcbiAgICAgICQkLmgyKCdMZXggQmVnaW4nKVxuICAgICAgbGV4ZXIuc2V0SW5wdXQoZGF0YSlcbiAgICAgIHdoaWxlICh0b2sgPSBsZXhlci5sZXgoKSkgIT0gbGV4ZXIuRU9GXG4gICAgICAgICQkLl8gdGVybWluYWxzW3Rva11cbiAgICAgICQkLmgyKCdMZXggRW5kJylcbiAgICAgICMjI1xuICAgICAgUGFyc2VyXG4gICAgICAjIyNcbiAgICAgIHBhcnNlciA9IG5ldyBNaWFQYXJzZXIobGV4ZXIsIHl5KVxuXG4gICAgICAkJC5oMignUGFyc2UgQmVnaW4nKVxuICAgICAgdHJ5XG4gICAgICAgIGFzdCA9IHBhcnNlci5wYXJzZShkYXRhKVxuICAgICAgY2F0Y2ggZXJyXG4gICAgICAgICQkLl8gZXJyLm1lc3NhZ2VcbiAgICAgICAgJCQuXyBlcnIuaGFzaFxuXG4gICAgICAkJC5oMignUGFyc2UgRW5kJylcbiAgICAgICQkLmgyKCdBU1QgQmVnaW4nKVxuICAgICAgJCQuXyhKU09OLnN0cmluZ2lmeShhc3QsIG51bGwsIDIpKVxuICAgICAgJCQuaDIoJ0FTVCBFbmQnKVxuXG4gICAgICAkJC5oMiAnQ29tcGlsZXIgQmVnaW4nXG4gICAgICAjXG4gICAgICBvdXQgPSBwcm9jZXNzLnN0ZG91dFxuICAgICAgI1xuICAgICAgY29tcGlsZXIgPSBuZXcgTWlhQ29tcGlsZXIob3V0KVxuICAgICAgY29tcGlsZXIuY29tcGlsZShhc3QpXG4iXX0=
