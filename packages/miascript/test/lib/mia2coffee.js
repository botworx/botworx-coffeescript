(function() {
  var $$, CoffeeScript, MiaCompiler, MiaLexer, MiaParser, Stringer, assert, compiler, grammar, process, stream, unit_, yy;

  assert = require('assert');

  process = require('process');

  stream = require('stream');

  CoffeeScript = require('coffeescript');

  ({unit_, Stringer, grammar, yy, compiler, MiaLexer, MiaParser, MiaCompiler} = require('./common'));

  $$ = unit_(module);

  describe('MiaCompiler', function() {
    return describe('to coffeescript', function() {
      return it('should work', function() {
        var ast, code, data, err, js, lexer, parser, stringer, terminals, tok;
        $$.h2('Data');
        data = "def (hello)\n\n  def (say $t)\n    | $t\n\n  say \"Hello World\"\n  say \"Goodbye World\"\n\nhello";
        $$._(data);
        $$.h2('Lex');
        terminals = grammar.parser.terminals_;
        lexer = new MiaLexer();
        lexer.setInput(data);
        while ((tok = lexer.lex()) !== lexer.EOF) {
          $$._(terminals[tok]);
        }
        $$.h2('Parse');
        parser = new MiaParser(lexer, yy);
        try {
          ast = parser.parse(data);
        } catch (error) {
          err = error;
          $$._(err.message);
          $$._(err.hash);
        }
        $$.h2('AST');
        $$._(JSON.stringify(ast, null, 2));
        $$.h2('Transpile');
        stringer = new Stringer();
        compiler = new MiaCompiler(stringer);
        compiler.compile(ast);
        code = stringer.toString();
        $$._(code);
        $$.h2('Compile');
        js = CoffeeScript.compile(code);
        return $$._(js);
      });
    });
  });

  //out.end()

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlhMmNvZmZlZS5qcyIsInNvdXJjZXMiOlsibWlhMmNvZmZlZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEVBQUEsRUFBQSxZQUFBLEVBQUEsV0FBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFBLENBQVEsUUFBUjs7RUFDVCxPQUFBLEdBQVUsT0FBQSxDQUFRLFNBQVI7O0VBQ1YsTUFBQSxHQUFTLE9BQUEsQ0FBUSxRQUFSOztFQUNULFlBQUEsR0FBZSxPQUFBLENBQVEsY0FBUjs7RUFDZixDQUFBLENBQUMsS0FBRCxFQUFRLFFBQVIsRUFBa0IsT0FBbEIsRUFBMkIsRUFBM0IsRUFBK0IsUUFBL0IsRUFBeUMsUUFBekMsRUFBbUQsU0FBbkQsRUFBOEQsV0FBOUQsQ0FBQSxHQUE2RSxPQUFBLENBQVEsVUFBUixDQUE3RTs7RUFDQSxFQUFBLEdBQUssS0FBQSxDQUFNLE1BQU47O0VBRUwsUUFBQSxDQUFTLGFBQVQsRUFBd0IsUUFBQSxDQUFBLENBQUE7V0FDdEIsUUFBQSxDQUFTLGlCQUFULEVBQTRCLFFBQUEsQ0FBQSxDQUFBO2FBQzFCLEVBQUEsQ0FBRyxhQUFILEVBQWtCLFFBQUEsQ0FBQSxDQUFBO0FBQ2hCLFlBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUE7UUFBQSxFQUFFLENBQUMsRUFBSCxDQUFNLE1BQU47UUFDQSxJQUFBLEdBQ0E7UUFXQSxFQUFFLENBQUMsQ0FBSCxDQUFLLElBQUw7UUFFQSxFQUFFLENBQUMsRUFBSCxDQUFNLEtBQU47UUFDQSxTQUFBLEdBQVksT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUMzQixLQUFBLEdBQVEsSUFBSSxRQUFKLENBQUE7UUFDUixLQUFLLENBQUMsUUFBTixDQUFlLElBQWY7QUFDQSxlQUFNLENBQUMsR0FBQSxHQUFNLEtBQUssQ0FBQyxHQUFOLENBQUEsQ0FBUCxDQUFBLEtBQXVCLEtBQUssQ0FBQyxHQUFuQztVQUNFLEVBQUUsQ0FBQyxDQUFILENBQUssU0FBVSxDQUFBLEdBQUEsQ0FBZjtRQURGO1FBR0EsRUFBRSxDQUFDLEVBQUgsQ0FBTSxPQUFOO1FBQ0EsTUFBQSxHQUFTLElBQUksU0FBSixDQUFjLEtBQWQsRUFBcUIsRUFBckI7QUFDVDtVQUNFLEdBQUEsR0FBTSxNQUFNLENBQUMsS0FBUCxDQUFhLElBQWIsRUFEUjtTQUFBLGFBQUE7VUFFTTtVQUNKLEVBQUUsQ0FBQyxDQUFILENBQUssR0FBRyxDQUFDLE9BQVQ7VUFDQSxFQUFFLENBQUMsQ0FBSCxDQUFLLEdBQUcsQ0FBQyxJQUFULEVBSkY7O1FBTUEsRUFBRSxDQUFDLEVBQUgsQ0FBTSxLQUFOO1FBQ0EsRUFBRSxDQUFDLENBQUgsQ0FBSyxJQUFJLENBQUMsU0FBTCxDQUFlLEdBQWYsRUFBb0IsSUFBcEIsRUFBMEIsQ0FBMUIsQ0FBTDtRQUVBLEVBQUUsQ0FBQyxFQUFILENBQU0sV0FBTjtRQUNBLFFBQUEsR0FBVyxJQUFJLFFBQUosQ0FBQTtRQUNYLFFBQUEsR0FBVyxJQUFJLFdBQUosQ0FBZ0IsUUFBaEI7UUFDWCxRQUFRLENBQUMsT0FBVCxDQUFpQixHQUFqQjtRQUNBLElBQUEsR0FBTyxRQUFRLENBQUMsUUFBVCxDQUFBO1FBQ1AsRUFBRSxDQUFDLENBQUgsQ0FBSyxJQUFMO1FBRUEsRUFBRSxDQUFDLEVBQUgsQ0FBTSxTQUFOO1FBQ0EsRUFBQSxHQUFLLFlBQVksQ0FBQyxPQUFiLENBQXFCLElBQXJCO2VBQ0wsRUFBRSxDQUFDLENBQUgsQ0FBSyxFQUFMO01BM0NnQixDQUFsQjtJQUQwQixDQUE1QjtFQURzQixDQUF4Qjs7RUFQQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiYXNzZXJ0ID0gcmVxdWlyZSAnYXNzZXJ0J1xucHJvY2VzcyA9IHJlcXVpcmUgJ3Byb2Nlc3MnXG5zdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxuQ29mZmVlU2NyaXB0ID0gcmVxdWlyZSAnY29mZmVlc2NyaXB0J1xue3VuaXRfLCBTdHJpbmdlciwgZ3JhbW1hciwgeXksIGNvbXBpbGVyLCBNaWFMZXhlciwgTWlhUGFyc2VyLCBNaWFDb21waWxlcn0gPSByZXF1aXJlKCcuL2NvbW1vbicpXG4kJCA9IHVuaXRfIG1vZHVsZVxuXG5kZXNjcmliZSAnTWlhQ29tcGlsZXInLCAtPlxuICBkZXNjcmliZSAndG8gY29mZmVlc2NyaXB0JywgLT5cbiAgICBpdCAnc2hvdWxkIHdvcmsnLCAtPlxuICAgICAgJCQuaDIgJ0RhdGEnXG4gICAgICBkYXRhID1cbiAgICAgIFwiXCJcIlxuICAgICAgZGVmIChoZWxsbylcblxuICAgICAgICBkZWYgKHNheSAkdClcbiAgICAgICAgICB8ICR0XG5cbiAgICAgICAgc2F5IFwiSGVsbG8gV29ybGRcIlxuICAgICAgICBzYXkgXCJHb29kYnllIFdvcmxkXCJcblxuICAgICAgaGVsbG9cbiAgICAgIFwiXCJcIlxuICAgICAgJCQuXyBkYXRhXG5cbiAgICAgICQkLmgyICdMZXgnXG4gICAgICB0ZXJtaW5hbHMgPSBncmFtbWFyLnBhcnNlci50ZXJtaW5hbHNfXG4gICAgICBsZXhlciA9IG5ldyBNaWFMZXhlcigpXG4gICAgICBsZXhlci5zZXRJbnB1dChkYXRhKVxuICAgICAgd2hpbGUgKHRvayA9IGxleGVyLmxleCgpKSAhPSBsZXhlci5FT0ZcbiAgICAgICAgJCQuXyB0ZXJtaW5hbHNbdG9rXVxuXG4gICAgICAkJC5oMiAnUGFyc2UnXG4gICAgICBwYXJzZXIgPSBuZXcgTWlhUGFyc2VyKGxleGVyLCB5eSlcbiAgICAgIHRyeVxuICAgICAgICBhc3QgPSBwYXJzZXIucGFyc2UoZGF0YSlcbiAgICAgIGNhdGNoIGVyclxuICAgICAgICAkJC5fIGVyci5tZXNzYWdlXG4gICAgICAgICQkLl8gZXJyLmhhc2hcblxuICAgICAgJCQuaDIgJ0FTVCdcbiAgICAgICQkLl8oSlNPTi5zdHJpbmdpZnkoYXN0LCBudWxsLCAyKSlcblxuICAgICAgJCQuaDIgJ1RyYW5zcGlsZSdcbiAgICAgIHN0cmluZ2VyID0gbmV3IFN0cmluZ2VyKClcbiAgICAgIGNvbXBpbGVyID0gbmV3IE1pYUNvbXBpbGVyKHN0cmluZ2VyKVxuICAgICAgY29tcGlsZXIuY29tcGlsZShhc3QpXG4gICAgICBjb2RlID0gc3RyaW5nZXIudG9TdHJpbmcoKVxuICAgICAgJCQuXyBjb2RlXG5cbiAgICAgICQkLmgyICdDb21waWxlJ1xuICAgICAganMgPSBDb2ZmZWVTY3JpcHQuY29tcGlsZSBjb2RlXG4gICAgICAkJC5fIGpzXG4gICAgICAjb3V0LmVuZCgpXG4iXX0=
